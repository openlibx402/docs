{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OpenLibX402: Autonomous Payments for AI Agents","text":"<p>Enable AI agents and web APIs to autonomously pay for services using HTTP 402 \"Payment Required\" and Solana blockchain</p> <p> </p>"},{"location":"#what-is-openlibx402","title":"What is OpenLibX402?","text":"<p>OpenLibX402 is a library ecosystem that implements the X402 protocol - an open standard for enabling AI agents to autonomously pay for API access, data, and digital services using the HTTP 402 \"Payment Required\" status code and blockchain micropayments.</p>"},{"location":"#key-features","title":"Key Features","text":"<p>\u2728 One-Line Integration - Add payments to APIs with a single decorator \ud83e\udd16 AI-Native - Built specifically for autonomous agent workflows \u26a1 Instant Settlement - Payments settle in ~200ms on Solana \ud83d\udcb0 Micropayments - Support payments as low as $0.001 \ud83d\udd10 No Accounts - No API keys, subscriptions, or manual billing \ud83c\udf10 Chain-Agnostic Design - Solana first, architected for multi-chain \ud83d\udee0\ufe0f Framework Integrations - FastAPI, LangChain, LangGraph, and more</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#server-fastapi","title":"Server (FastAPI)","text":"<pre><code>from fastapi import FastAPI\nfrom openlibx402_fastapi import payment_required\n\napp = FastAPI()\n\n@app.get(\"/premium-data\")\n@payment_required(\n    amount=\"0.10\",\n    payment_address=\"YOUR_WALLET_ADDRESS\",\n    token_mint=\"USDC_MINT_ADDRESS\"\n)\nasync def get_premium_data():\n    return {\"data\": \"Premium content\"}\n</code></pre>"},{"location":"#client-auto-payment","title":"Client (Auto-Payment)","text":"<pre><code>from openlibx402_client import X402AutoClient\nfrom solders.keypair import Keypair\n\nclient = X402AutoClient(wallet_keypair=keypair)\n\n# Automatically handles 402 and pays\nresponse = await client.fetch(\"https://api.example.com/premium-data\")\ndata = response.json()\n</code></pre>"},{"location":"#langchain-agent","title":"LangChain Agent","text":"<pre><code>from openlibx402_langchain import create_x402_agent\nfrom langchain.chat_models import ChatOpenAI\n\nagent = create_x402_agent(\n    wallet_keypair=keypair,\n    llm=ChatOpenAI(),\n    max_payment=\"5.0\"\n)\n\nresponse = agent.run(\"Get premium market data from the API\")\n</code></pre>"},{"location":"#how-it-works","title":"How It Works","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  AI Agent   \u2502  \u25001\u2500\u2192   \u2502  API Server  \u2502         \u2502 Blockchain \u2502\n\u2502   (Client)  \u2502         \u2502   (Server)   \u2502         \u2502  (Solana)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                        \u2502                        \u2502\n       \u2502  GET /data             \u2502                        \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502                        \u2502\n       \u2502                        \u2502                        \u2502\n       \u2502  402 Payment Required  \u2502                        \u2502\n       \u2502  + Payment Details     \u2502                        \u2502\n       \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                        \u2502\n       \u2502                        \u2502                        \u2502\n       \u2502  Create &amp; Broadcast    \u2502                        \u2502\n       \u2502  Payment Transaction   \u2502                        \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502\n       \u2502                        \u2502                        \u2502\n       \u2502                        \u2502   Verify Transaction   \u2502\n       \u2502                        \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502                        \u2502                        \u2502\n       \u2502  GET /data             \u2502                        \u2502\n       \u2502  + Payment Auth Header \u2502                        \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502                        \u2502\n       \u2502                        \u2502                        \u2502\n       \u2502  200 OK + Data         \u2502                        \u2502\n       \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                        \u2502\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>\ud83d\udcda Technical Specification - Complete architecture and design \ud83d\udcd6 Quick Reference - Common patterns and examples \ud83d\udcdd Project Summary - Overview and next steps</p>"},{"location":"#packages","title":"Packages","text":""},{"location":"#core","title":"Core","text":"<ul> <li><code>openlibx402-core</code> - Core protocol implementation</li> <li><code>@openlibx402/core</code> - TypeScript equivalent</li> </ul>"},{"location":"#server-frameworks","title":"Server Frameworks","text":"<ul> <li><code>openlibx402-fastapi</code> - FastAPI middleware (Python)</li> <li><code>@openlibx402/express</code> - Express.js middleware (TypeScript)</li> <li><code>@openlibx402/nextjs</code> - Next.js API routes (TypeScript)</li> <li><code>@openlibx402/hono</code> - Hono middleware (TypeScript)</li> </ul>"},{"location":"#client-libraries","title":"Client Libraries","text":"<ul> <li><code>openlibx402-client</code> - HTTP client with payment support (Python)</li> <li><code>@openlibx402/client</code> - TypeScript client</li> </ul>"},{"location":"#ai-agent-integrations","title":"AI Agent Integrations","text":"<ul> <li><code>openlibx402-langchain</code> - LangChain Tool &amp; Middleware (Python)</li> <li><code>openlibx402-langgraph</code> - LangGraph nodes (Python)</li> <li><code>@openlibx402/langchain</code> - TypeScript LangChain integration</li> <li><code>@openlibx402/langgraph</code> - TypeScript LangGraph integration</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#for-api-providers","title":"For API Providers","text":"<ul> <li>\ud83d\udcb5 Monetize APIs with pay-per-use pricing</li> <li>\ud83d\udeab Eliminate API key management</li> <li>\u26a1 Instant payment settlement</li> <li>\ud83d\udee1\ufe0f No chargebacks or fraud risk</li> </ul>"},{"location":"#for-ai-agents","title":"For AI Agents","text":"<ul> <li>\ud83d\udd13 Access premium data without human intervention</li> <li>\ud83d\udcb0 Pay exactly for what you use</li> <li>\ud83c\udf0d No geographic restrictions</li> <li>\ud83e\udd16 Fully autonomous operation</li> </ul>"},{"location":"#real-world-examples","title":"Real-World Examples","text":"<ul> <li>\ud83d\udcca Research agent paying per financial data point</li> <li>\ud83c\udfaf Trading bot accessing real-time market data</li> <li>\ud83d\udcf0 Content aggregator paying per article</li> <li>\ud83d\uddbc\ufe0f Image generation API charging per image</li> <li>\u2601\ufe0f GPU compute charged per minute</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Application Layer                    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510             \u2502\n\u2502  \u2502 FastAPI  \u2502  \u2502LangChain \u2502  \u2502LangGraph \u2502             \u2502\n\u2502  \u2502 Middleware\u2502  \u2502   Tool   \u2502  \u2502  Nodes   \u2502             \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502             \u2502             \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              openlibx402-core / @openlibx402/core              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   Payment    \u2502  \u2502    Solana    \u2502  \u2502     Error     \u2502  \u2502\n\u2502  \u2502    Models    \u2502  \u2502  Processor   \u2502  \u2502   Handling    \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Blockchain Layer                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n\u2502  \u2502  Solana  \u2502  \u2502 Ethereum \u2502  \u2502   Base   \u2502  (Future)    \u2502\n\u2502  \u2502  Devnet  \u2502  \u2502 Mainnet  \u2502  \u2502    L2    \u2502              \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#development-status","title":"Development Status","text":""},{"location":"#phase-1-python","title":"\u2705 Phase 1: Python","text":"<ul> <li>\u2705 Technical specification complete</li> <li>\u2705 Core package (Python)</li> <li>\u2705 FastAPI integration</li> <li>\u2705 Client library</li> <li>\u2705 LangChain integration</li> <li>\u2705 LangGraph integration</li> <li>\u2705 Example implementations</li> </ul>"},{"location":"#phase-2-typescript","title":"\ud83c\udfd7\ufe0f Phase 2: TypeScript","text":"<ul> <li>\u2705 Core package (TypeScript)</li> <li>\u2705 Express.js middleware</li> <li>\u2705 Client library (TS)</li> <li>\u2705 LangChain.js integration</li> <li>\u2705 LangGraph.js integration</li> <li>\ud83c\udfd7\ufe0f Next.js integration</li> </ul>"},{"location":"#phase-3-ecosystem","title":"\ud83d\udd32 Phase 3: Ecosystem","text":"<ul> <li>[ ] Flask middleware</li> <li>[ ] Django middleware</li> <li>[ ] Hono middleware</li> <li>[ ] Additional agent frameworks</li> <li>[ ] CLI tools</li> </ul>"},{"location":"#phase-4-advanced","title":"\ud83d\udd32 Phase 4: Advanced","text":"<ul> <li>[ ] Multi-chain support (Ethereum, Base)</li> <li>[ ] Payment batching</li> <li>[ ] Admin dashboard</li> <li>[ ] Analytics &amp; monitoring</li> <li>[ ] Browser extension</li> </ul>"},{"location":"#installation-when-available","title":"Installation (When Available)","text":""},{"location":"#python","title":"Python","text":"<pre><code>pip install openlibx402-core openlibx402-fastapi openlibx402-client\npip install openlibx402-langchain openlibx402-langgraph\n</code></pre>"},{"location":"#typescript","title":"TypeScript","text":"<pre><code>npm install @openlibx402/core @openlibx402/express @openlibx402/client\nnpm install @openlibx402/langchain @openlibx402/langgraph\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"#fastapi-server","title":"FastAPI Server","text":"<pre><code>from fastapi import FastAPI\nfrom openlibx402_fastapi import X402Config, init_x402, payment_required\n\n# Initialize X402\nconfig = X402Config(\n    payment_address=\"YOUR_WALLET\",\n    token_mint=\"USDC_MINT\",\n    network=\"solana-devnet\"\n)\ninit_x402(config)\n\napp = FastAPI()\n\n@app.get(\"/basic-data\")\nasync def get_basic_data():\n    return {\"data\": \"Free content\"}\n\n@app.get(\"/premium-data\")\n@payment_required(amount=\"0.10\", description=\"Premium market data\")\nasync def get_premium_data():\n    return {\"data\": \"Premium content\", \"price\": 100.50}\n</code></pre>"},{"location":"#langchain-agent_1","title":"LangChain Agent","text":"<pre><code>from langchain.chat_models import ChatOpenAI\nfrom openlibx402_langchain import create_x402_agent\nfrom solders.keypair import Keypair\n\n# Load wallet\nkeypair = Keypair()\n\n# Create agent with X402 support\nagent = create_x402_agent(\n    wallet_keypair=keypair,\n    llm=ChatOpenAI(),\n    max_payment=\"5.0\"\n)\n\n# Agent can now autonomously pay for API access\nresponse = agent.run(\n    \"Get the latest market data from https://api.example.com/premium-data \"\n    \"and summarize the key trends\"\n)\n</code></pre>"},{"location":"#langgraph-workflow","title":"LangGraph Workflow","text":"<pre><code>from typing import TypedDict\nfrom langgraph.graph import StateGraph, END\nfrom openlibx402_langgraph import payment_node, check_payment_required\nfrom solders.keypair import Keypair\n\nclass AgentState(TypedDict):\n    api_url: str\n    api_response: str\n    payment_required: bool\n    payment_completed: bool\n    wallet_keypair: Keypair\n\nworkflow = StateGraph(AgentState)\n\nworkflow.add_node(\"fetch\", fetch_api_node)\nworkflow.add_node(\"pay\", payment_node)  # From openlibx402-langgraph\nworkflow.add_node(\"process\", process_node)\n\nworkflow.set_entry_point(\"fetch\")\n\nworkflow.add_conditional_edges(\n    \"fetch\",\n    check_payment_required,\n    {\n        \"payment_required\": \"pay\",\n        \"success\": \"process\",\n        \"error\": END\n    }\n)\n\nworkflow.add_edge(\"pay\", \"fetch\")\nworkflow.add_edge(\"process\", END)\n\napp = workflow.compile()\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":""},{"location":"#environment-variables","title":"Environment Variables","text":"<pre><code>X402_PAYMENT_ADDRESS=YourSolanaWalletAddress\nX402_TOKEN_MINT=USDC_MINT_ADDRESS\nX402_NETWORK=solana-devnet\nX402_RPC_URL=https://api.devnet.solana.com\n</code></pre>"},{"location":"#code-configuration","title":"Code Configuration","text":"<pre><code>from openlibx402_fastapi import X402Config\n\nconfig = X402Config(\n    payment_address=\"YOUR_WALLET\",\n    token_mint=\"USDC_MINT\",\n    network=\"solana-devnet\",\n    rpc_url=\"https://api.devnet.solana.com\",\n    payment_timeout=300,  # 5 minutes\n    auto_verify=True\n)\n</code></pre>"},{"location":"#security","title":"Security","text":"<p>\ud83d\udd10 Key Security Features: - Private keys never leave client - On-chain transaction verification - Nonce-based replay protection - Payment expiration timestamps - Maximum payment limits - HTTPS required for production</p> <p>\u26a0\ufe0f Security Best Practices: - Never log private keys - Use environment variables for secrets - Validate all payment fields - Set reasonable payment timeouts - Implement rate limiting - Use hardware wallets in production</p>"},{"location":"#testing","title":"Testing","text":""},{"location":"#mock-payment-processor","title":"Mock Payment Processor","text":"<pre><code>from openlibx402_core.testing import MockSolanaPaymentProcessor\n\nprocessor = MockSolanaPaymentProcessor()\nprocessor.balance = 100.0\n\n# Use in tests without real blockchain\nclient = X402AutoClient(wallet_keypair=test_keypair)\nclient.client.processor = processor\n</code></pre>"},{"location":"#test-server","title":"Test Server","text":"<pre><code>from openlibx402_core.testing import TestServer\n\nserver = TestServer(\n    payment_address=\"test_address\",\n    token_mint=\"test_usdc\"\n)\nserver.start(port=8402)\n\n# Test against mock server\n# ...\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Here's how you can help:</p> <ol> <li>\ud83d\udc1b Report bugs via GitHub Issues</li> <li>\ud83d\udca1 Suggest features or improvements</li> <li>\ud83d\udcdd Improve documentation</li> <li>\ud83d\udd27 Submit pull requests</li> <li>\u2b50 Star the repository</li> </ol>"},{"location":"#development-setup","title":"Development Setup","text":"<pre><code># Clone repository\ngit clone https://github.com/openlibx402/openlibx402.git\ncd openlibx402\n\n# Install development dependencies\npip install -e \"packages/python/openlibx402-core[dev]\"\n\n# Run tests\npytest\n\n# Format code\nblack packages/python/\n</code></pre>"},{"location":"#roadmap","title":"Roadmap","text":""},{"location":"#q4-2025","title":"Q4 2025","text":"<ul> <li>\u2705 Technical specification</li> <li>\u2705 Core libraries (Python &amp; TypeScript)</li> <li>\u2705 FastAPI integration</li> <li>\u2705 LangChain/LangGraph integrations</li> <li>\u2705 Express.js, Next.js integrations</li> <li>\u2705 Documentation site</li> <li>\ud83d\udd32 Additional framework support</li> <li>\ud83d\udd32 CLI tools</li> </ul>"},{"location":"#2026","title":"2026","text":"<ul> <li>\ud83d\udd32 Multi-chain support (Ethereum, Base)</li> <li>\ud83d\udd32 Admin dashboard</li> <li>\ud83d\udd32 Analytics &amp; monitoring</li> <li>\ud83d\udd32 Production deployments</li> <li>\ud83d\udd32 Browser extension</li> <li>\ud83d\udd32 Wallet UI components</li> <li>\ud83d\udd32 Zapier/Make.com integrations</li> <li>\ud83d\udd32 Enterprise features</li> </ul>"},{"location":"#faq","title":"FAQ","text":"<p>Q: Why Solana first? A: Solana offers ~200ms transaction finality and &lt;$0.0001 fees, making it ideal for micropayments.</p> <p>Q: Will this support other blockchains? A: Yes! The architecture is designed to be chain-agnostic. Ethereum and Base L2 support is planned.</p> <p>Q: Do I need crypto knowledge to use this? A: Minimal. The libraries handle blockchain complexity. You just need a wallet and some tokens.</p> <p>Q: Is this production-ready? A: Not yet. We're currently in development. Follow progress on GitHub.</p> <p>Q: How much do transactions cost? A: On Solana devnet/mainnet, transaction fees are &lt;$0.0001. Payment amounts are configurable.</p> <p>Q: Can agents really operate autonomously? A: Yes! Once configured with a wallet, agents can discover, pay for, and use APIs without human intervention.</p>"},{"location":"#resources","title":"Resources","text":"<ul> <li>\ud83d\udcc4 X402 Whitepaper</li> <li>\ud83c\udf10 X402 Protocol Website</li> <li>\ud83d\udcda Solana Documentation</li> <li>\ud83d\udd17 SPL Token Program</li> <li>\ud83e\udd9c LangChain Docs</li> <li>\ud83d\udd78\ufe0f LangGraph Docs</li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li>\ud83d\udcac Discord - Coming soon</li> <li>\ud83d\udc26 Twitter - Coming soon</li> <li>\ud83d\udce7 Email - x402@openlib.xyz</li> </ul>"},{"location":"#license","title":"License","text":"<p>OpenLibX402 is released under the MIT License.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Built on the X402 protocol by Coinbase</li> <li>Powered by Solana blockchain</li> <li>Integrates with LangChain and LangGraph</li> </ul> <p>Built with \u2764\ufe0f for the autonomous AI economy</p> <p>Documentation | Examples | Contribute</p>"},{"location":"openlibx402-technical-spec/","title":"OpenLibX402 Technical Specification","text":""},{"location":"openlibx402-technical-spec/#project-overview","title":"Project Overview","text":"<p>OpenLibX402 is a library ecosystem that implements the X402 protocol for enabling autonomous, frictionless payments in AI agents and web APIs. The protocol leverages HTTP 402 \"Payment Required\" status code and Solana blockchain for instant, low-cost transactions.</p>"},{"location":"openlibx402-technical-spec/#core-principles","title":"Core Principles","text":"<ol> <li>Machine-Native Payments: Enable AI agents to autonomously pay for API access without human intervention</li> <li>Pay-Per-Use: Support micropayments with near-zero transaction costs</li> <li>Developer-Friendly: Simple integration with one-line middleware</li> <li>Blockchain-Agnostic Design: Start with Solana, architect for future chain support</li> <li>Dual API Approach: Support both explicit and implicit payment handling</li> </ol>"},{"location":"openlibx402-technical-spec/#project-structure","title":"Project Structure","text":"<pre><code>openlibx402/\n\u251c\u2500\u2500 packages/\n\u2502   \u251c\u2500\u2500 core/                      # Core protocol implementation\n\u2502   \u2502   \u251c\u2500\u2500 python/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 openlibx402-core/\n\u2502   \u2502   \u2514\u2500\u2500 typescript/\n\u2502   \u2502       \u2514\u2500\u2500 @openlibx402/core\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 server/                    # Server-side libraries\n\u2502   \u2502   \u251c\u2500\u2500 python/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 openlibx402-fastapi/\n\u2502   \u2502   \u2514\u2500\u2500 typescript/\n\u2502   \u2502       \u251c\u2500\u2500 @openlibx402/express\n\u2502   \u2502       \u251c\u2500\u2500 @openlibx402/nextjs\n\u2502   \u2502       \u2514\u2500\u2500 @openlibx402/hono\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 client/                    # Client-side libraries\n\u2502   \u2502   \u251c\u2500\u2500 python/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 openlibx402-client/\n\u2502   \u2502   \u2514\u2500\u2500 typescript/\n\u2502   \u2502       \u2514\u2500\u2500 @openlibx402/client\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 integrations/              # Framework integrations\n\u2502       \u251c\u2500\u2500 python/\n\u2502       \u2502   \u251c\u2500\u2500 openlibx402-langchain/\n\u2502       \u2502   \u2514\u2500\u2500 openlibx402-langgraph/\n\u2502       \u2514\u2500\u2500 typescript/\n\u2502           \u251c\u2500\u2500 @openlibx402/langchain\n\u2502           \u2514\u2500\u2500 @openlibx402/langgraph\n\u2502\n\u251c\u2500\u2500 examples/                      # Example implementations\n\u2502   \u251c\u2500\u2500 fastapi-server/\n\u2502   \u251c\u2500\u2500 langchain-agent/\n\u2502   \u251c\u2500\u2500 langgraph-workflow/\n\u2502   \u2514\u2500\u2500 fullstack-demo/\n\u2502\n\u2514\u2500\u2500 docs/\n    \u251c\u2500\u2500 getting-started.md\n    \u251c\u2500\u2500 api-reference.md\n    \u2514\u2500\u2500 integration-guides/\n</code></pre>"},{"location":"openlibx402-technical-spec/#1-core-protocol-implementation","title":"1. Core Protocol Implementation","text":""},{"location":"openlibx402-technical-spec/#package-openlibx402-core-python-openlibx402core-typescript","title":"Package: <code>openlibx402-core</code> (Python) / <code>@openlibx402/core</code> (TypeScript)","text":""},{"location":"openlibx402-technical-spec/#purpose","title":"Purpose","text":"<p>Core protocol logic for X402 payment flow, independent of any framework.</p>"},{"location":"openlibx402-technical-spec/#key-components","title":"Key Components","text":""},{"location":"openlibx402-technical-spec/#11-payment-request-structure","title":"1.1 Payment Request Structure","text":"<pre><code># Python\nfrom dataclasses import dataclass\nfrom typing import Optional\nfrom datetime import datetime\n\n@dataclass\nclass PaymentRequest:\n    \"\"\"Represents an X402 payment request (402 response)\"\"\"\n    max_amount_required: str           # Amount in token units (e.g., \"0.10\")\n    asset_type: str                    # \"SPL\" for Solana tokens\n    asset_address: str                 # Token mint address\n    payment_address: str               # Recipient's wallet address\n    network: str                       # \"solana-devnet\" | \"solana-mainnet\"\n    expires_at: datetime               # Expiration timestamp\n    nonce: str                         # Unique identifier for replay protection\n    payment_id: str                    # Unique payment request ID\n    resource: str                      # API endpoint being accessed\n    description: Optional[str] = None  # Human-readable description\n\n    def to_dict(self) -&gt; dict:\n        \"\"\"Convert to JSON-serializable dict\"\"\"\n        pass\n\n    @classmethod\n    def from_dict(cls, data: dict) -&gt; 'PaymentRequest':\n        \"\"\"Parse from 402 response JSON\"\"\"\n        pass\n\n    def is_expired(self) -&gt; bool:\n        \"\"\"Check if payment request has expired\"\"\"\n        pass\n</code></pre> <pre><code>// TypeScript\nexport interface PaymentRequest {\n  maxAmountRequired: string;\n  assetType: string;\n  assetAddress: string;\n  paymentAddress: string;\n  network: string;\n  expiresAt: Date;\n  nonce: string;\n  paymentId: string;\n  resource: string;\n  description?: string;\n}\n\nexport class PaymentRequestParser {\n  static parse(response: Response): PaymentRequest;\n  static isExpired(request: PaymentRequest): boolean;\n  static toJSON(request: PaymentRequest): string;\n}\n</code></pre>"},{"location":"openlibx402-technical-spec/#12-payment-authorization","title":"1.2 Payment Authorization","text":"<pre><code>@dataclass\nclass PaymentAuthorization:\n    \"\"\"Signed payment authorization to be sent with retry request\"\"\"\n    payment_id: str                    # From payment request\n    actual_amount: str                 # Amount being paid (\u2264 max_amount_required)\n    payment_address: str               # Recipient address\n    asset_address: str                 # Token mint address\n    network: str                       # Blockchain network\n    timestamp: datetime                # Authorization timestamp\n    signature: str                     # Solana signature\n    public_key: str                    # Payer's public key\n    transaction_hash: Optional[str]    # On-chain tx hash (after broadcast)\n\n    def to_header_value(self) -&gt; str:\n        \"\"\"Encode as X-Payment-Authorization header value\"\"\"\n        pass\n\n    @classmethod\n    def from_header(cls, header_value: str) -&gt; 'PaymentAuthorization':\n        \"\"\"Parse from request header\"\"\"\n        pass\n</code></pre> <pre><code>export interface PaymentAuthorization {\n  paymentId: string;\n  actualAmount: string;\n  paymentAddress: string;\n  assetAddress: string;\n  network: string;\n  timestamp: Date;\n  signature: string;\n  publicKey: string;\n  transactionHash?: string;\n}\n\nexport class PaymentAuthorizationHandler {\n  static toHeader(auth: PaymentAuthorization): string;\n  static fromHeader(headerValue: string): PaymentAuthorization;\n  static verify(auth: PaymentAuthorization, request: PaymentRequest): boolean;\n}\n</code></pre>"},{"location":"openlibx402-technical-spec/#13-solana-integration","title":"1.3 Solana Integration","text":"<pre><code>from solana.rpc.async_api import AsyncClient\nfrom solana.transaction import Transaction\nfrom solders.keypair import Keypair\nfrom solders.pubkey import Pubkey\nfrom spl.token.instructions import transfer_checked, TransferCheckedParams\n\nclass SolanaPaymentProcessor:\n    \"\"\"Handles Solana blockchain operations\"\"\"\n\n    def __init__(self, rpc_url: str, keypair: Optional[Keypair] = None):\n        self.client = AsyncClient(rpc_url)\n        self.keypair = keypair\n\n    async def create_payment_transaction(\n        self,\n        request: PaymentRequest,\n        amount: str,\n        payer_keypair: Keypair\n    ) -&gt; Transaction:\n        \"\"\"Create a Solana transaction for the payment\"\"\"\n        pass\n\n    async def sign_and_send_transaction(\n        self,\n        transaction: Transaction,\n        keypair: Keypair\n    ) -&gt; str:\n        \"\"\"Sign and broadcast transaction, return tx hash\"\"\"\n        pass\n\n    async def verify_transaction(\n        self,\n        transaction_hash: str,\n        expected_recipient: str,\n        expected_amount: str,\n        expected_token_mint: str\n    ) -&gt; bool:\n        \"\"\"Verify a transaction was successful and matches expectations\"\"\"\n        pass\n\n    async def get_token_balance(\n        self,\n        wallet_address: str,\n        token_mint: str\n    ) -&gt; float:\n        \"\"\"Get token balance for a wallet\"\"\"\n        pass\n</code></pre> <pre><code>import { Connection, Keypair, PublicKey, Transaction } from '@solana/web3.js';\nimport { getAssociatedTokenAddress, createTransferCheckedInstruction } from '@solana/spl-token';\n\nexport class SolanaPaymentProcessor {\n  private connection: Connection;\n  private keypair?: Keypair;\n\n  constructor(rpcUrl: string, keypair?: Keypair);\n\n  async createPaymentTransaction(\n    request: PaymentRequest,\n    amount: string,\n    payerKeypair: Keypair\n  ): Promise&lt;Transaction&gt;;\n\n  async signAndSendTransaction(\n    transaction: Transaction,\n    keypair: Keypair\n  ): Promise&lt;string&gt;;\n\n  async verifyTransaction(\n    transactionHash: string,\n    expectedRecipient: string,\n    expectedAmount: string,\n    expectedTokenMint: string\n  ): Promise&lt;boolean&gt;;\n\n  async getTokenBalance(\n    walletAddress: string,\n    tokenMint: string\n  ): Promise&lt;number&gt;;\n}\n</code></pre>"},{"location":"openlibx402-technical-spec/#14-error-handling","title":"1.4 Error Handling","text":"<pre><code>class X402Error(Exception):\n    \"\"\"Base exception for X402 protocol errors\"\"\"\n    code: str\n    message: str\n    details: Optional[dict]\n\nclass PaymentRequiredError(X402Error):\n    \"\"\"Raised when 402 response received\"\"\"\n    code = \"PAYMENT_REQUIRED\"\n    payment_request: PaymentRequest\n\nclass PaymentExpiredError(X402Error):\n    \"\"\"Payment request has expired\"\"\"\n    code = \"PAYMENT_EXPIRED\"\n\nclass InsufficientFundsError(X402Error):\n    \"\"\"Wallet has insufficient funds\"\"\"\n    code = \"INSUFFICIENT_FUNDS\"\n    required_amount: str\n    available_amount: str\n\nclass PaymentVerificationError(X402Error):\n    \"\"\"Payment verification failed\"\"\"\n    code = \"PAYMENT_VERIFICATION_FAILED\"\n\nclass TransactionBroadcastError(X402Error):\n    \"\"\"Failed to broadcast transaction\"\"\"\n    code = \"TRANSACTION_BROADCAST_FAILED\"\n\nclass InvalidPaymentRequestError(X402Error):\n    \"\"\"Payment request format is invalid\"\"\"\n    code = \"INVALID_PAYMENT_REQUEST\"\n</code></pre> <pre><code>export class X402Error extends Error {\n  code: string;\n  details?: Record&lt;string, any&gt;;\n  constructor(message: string, code: string, details?: Record&lt;string, any&gt;);\n}\n\nexport class PaymentRequiredError extends X402Error {\n  paymentRequest: PaymentRequest;\n  constructor(paymentRequest: PaymentRequest);\n}\n\nexport class PaymentExpiredError extends X402Error {\n  constructor(paymentRequest: PaymentRequest);\n}\n\nexport class InsufficientFundsError extends X402Error {\n  requiredAmount: string;\n  availableAmount: string;\n  constructor(required: string, available: string);\n}\n\nexport class PaymentVerificationError extends X402Error {\n  constructor(reason: string);\n}\n\nexport class TransactionBroadcastError extends X402Error {\n  constructor(reason: string);\n}\n\nexport class InvalidPaymentRequestError extends X402Error {\n  constructor(reason: string);\n}\n</code></pre>"},{"location":"openlibx402-technical-spec/#2-server-side-implementation","title":"2. Server-Side Implementation","text":""},{"location":"openlibx402-technical-spec/#package-openlibx402-fastapi-python","title":"Package: <code>openlibx402-fastapi</code> (Python)","text":""},{"location":"openlibx402-technical-spec/#purpose_1","title":"Purpose","text":"<p>FastAPI middleware for accepting X402 payments on API endpoints.</p>"},{"location":"openlibx402-technical-spec/#key-components_1","title":"Key Components","text":""},{"location":"openlibx402-technical-spec/#21-middleware","title":"2.1 Middleware","text":"<pre><code>from fastapi import Request, Response\nfrom typing import Callable, Optional\nfrom datetime import datetime, timedelta\nimport secrets\n\nclass X402PaymentMiddleware:\n    \"\"\"FastAPI middleware for X402 payment handling\"\"\"\n\n    def __init__(\n        self,\n        payment_address: str,           # Recipient wallet address\n        token_mint: str,                # SPL token mint address (USDC)\n        network: str = \"solana-devnet\", # Network identifier\n        rpc_url: str = None,            # Solana RPC endpoint\n        payment_timeout: int = 300,     # Payment validity in seconds\n        auto_verify: bool = True,       # Auto-verify payments\n    ):\n        self.payment_address = payment_address\n        self.token_mint = token_mint\n        self.network = network\n        self.rpc_url = rpc_url or self._default_rpc_url(network)\n        self.payment_timeout = payment_timeout\n        self.auto_verify = auto_verify\n        self.processor = SolanaPaymentProcessor(self.rpc_url)\n\n    async def __call__(\n        self,\n        request: Request,\n        call_next: Callable,\n    ) -&gt; Response:\n        \"\"\"Process request, check for payment, return 402 if needed\"\"\"\n        pass\n\ndef payment_required(\n    amount: str,\n    payment_address: str,\n    token_mint: str,\n    network: str = \"solana-devnet\",\n    description: Optional[str] = None,\n    expires_in: int = 300,\n):\n    \"\"\"\n    Decorator for FastAPI endpoints requiring payment\n\n    Usage:\n        @app.get(\"/premium-data\")\n        @payment_required(\n            amount=\"0.10\",\n            payment_address=\"FPxxx...\",\n            token_mint=\"USDC_MINT_ADDRESS\"\n        )\n        async def get_premium_data():\n            return {\"data\": \"Premium content\"}\n    \"\"\"\n    def decorator(func):\n        async def wrapper(*args, **kwargs):\n            # Check for payment authorization header\n            # If missing, return 402 response\n            # If present, verify payment\n            # If valid, call original function\n            pass\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"openlibx402-technical-spec/#22-dependency-injection-pattern","title":"2.2 Dependency Injection Pattern","text":"<pre><code>from fastapi import Depends, HTTPException\n\nasync def verify_payment(\n    request: Request,\n    required_amount: str,\n    payment_address: str,\n    token_mint: str,\n) -&gt; PaymentAuthorization:\n    \"\"\"\n    FastAPI dependency for payment verification\n\n    Usage:\n        @app.get(\"/premium-data\")\n        async def get_premium_data(\n            payment: PaymentAuthorization = Depends(\n                verify_payment_factory(\"0.10\", WALLET, TOKEN)\n            )\n        ):\n            return {\"data\": \"Premium content\"}\n    \"\"\"\n    pass\n\ndef verify_payment_factory(\n    amount: str,\n    payment_address: str,\n    token_mint: str,\n    network: str = \"solana-devnet\",\n):\n    \"\"\"Factory for creating payment verification dependency\"\"\"\n    async def _verify(request: Request) -&gt; PaymentAuthorization:\n        return await verify_payment(\n            request, amount, payment_address, token_mint\n        )\n    return _verify\n</code></pre>"},{"location":"openlibx402-technical-spec/#23-configuration","title":"2.3 Configuration","text":"<pre><code>from pydantic import BaseModel\n\nclass X402Config(BaseModel):\n    \"\"\"Global X402 configuration\"\"\"\n    payment_address: str\n    token_mint: str\n    network: str = \"solana-devnet\"\n    rpc_url: Optional[str] = None\n    default_amount: str = \"0.01\"\n    payment_timeout: int = 300\n    auto_verify: bool = True\n\n    class Config:\n        env_prefix = \"X402_\"  # Load from X402_* environment variables\n\n# Singleton configuration\n_config: Optional[X402Config] = None\n\ndef init_x402(config: X402Config):\n    \"\"\"Initialize global X402 configuration\"\"\"\n    global _config\n    _config = config\n\ndef get_config() -&gt; X402Config:\n    \"\"\"Get global X402 configuration\"\"\"\n    if _config is None:\n        raise RuntimeError(\"X402 not initialized. Call init_x402() first.\")\n    return _config\n</code></pre>"},{"location":"openlibx402-technical-spec/#24-response-builder","title":"2.4 Response Builder","text":"<pre><code>from fastapi.responses import JSONResponse\n\ndef build_402_response(\n    amount: str,\n    payment_address: str,\n    token_mint: str,\n    network: str,\n    resource: str,\n    description: Optional[str] = None,\n    expires_in: int = 300,\n) -&gt; JSONResponse:\n    \"\"\"Build a properly formatted 402 Payment Required response\"\"\"\n\n    payment_request = PaymentRequest(\n        max_amount_required=amount,\n        asset_type=\"SPL\",\n        asset_address=token_mint,\n        payment_address=payment_address,\n        network=network,\n        expires_at=datetime.utcnow() + timedelta(seconds=expires_in),\n        nonce=secrets.token_urlsafe(32),\n        payment_id=secrets.token_urlsafe(16),\n        resource=resource,\n        description=description,\n    )\n\n    return JSONResponse(\n        status_code=402,\n        content=payment_request.to_dict(),\n        headers={\n            \"X-Payment-Required\": \"true\",\n            \"X-Payment-Protocol\": \"x402\",\n        }\n    )\n</code></pre>"},{"location":"openlibx402-technical-spec/#3-client-side-implementation","title":"3. Client-Side Implementation","text":""},{"location":"openlibx402-technical-spec/#package-openlibx402-client-python-openlibx402client-typescript","title":"Package: <code>openlibx402-client</code> (Python) / <code>@openlibx402/client</code> (TypeScript)","text":""},{"location":"openlibx402-technical-spec/#purpose_2","title":"Purpose","text":"<p>Client libraries for making X402-enabled API calls with automatic payment handling.</p>"},{"location":"openlibx402-technical-spec/#key-components_2","title":"Key Components","text":""},{"location":"openlibx402-technical-spec/#31-explicit-client-manual-payment-control","title":"3.1 Explicit Client (Manual Payment Control)","text":"<pre><code>from typing import Optional, Dict, Any\nimport httpx\n\nclass X402Client:\n    \"\"\"\n    Explicit X402 client - developer controls payment flow\n\n    Usage:\n        client = X402Client(wallet_keypair)\n\n        # Check if payment required\n        response = await client.get(\"https://api.example.com/data\")\n\n        if client.payment_required(response):\n            payment_request = client.parse_payment_request(response)\n\n            # Make payment\n            authorization = await client.create_payment(payment_request)\n\n            # Retry with payment\n            response = await client.get(\n                \"https://api.example.com/data\",\n                payment=authorization\n            )\n    \"\"\"\n\n    def __init__(\n        self,\n        wallet_keypair: Keypair,\n        rpc_url: Optional[str] = None,\n        http_client: Optional[httpx.AsyncClient] = None,\n    ):\n        self.wallet_keypair = wallet_keypair\n        self.http_client = http_client or httpx.AsyncClient()\n        self.processor = SolanaPaymentProcessor(\n            rpc_url or \"https://api.devnet.solana.com\"\n        )\n\n    async def get(\n        self,\n        url: str,\n        payment: Optional[PaymentAuthorization] = None,\n        **kwargs\n    ) -&gt; httpx.Response:\n        \"\"\"Make GET request with optional payment\"\"\"\n        headers = kwargs.get(\"headers\", {})\n        if payment:\n            headers[\"X-Payment-Authorization\"] = payment.to_header_value()\n        kwargs[\"headers\"] = headers\n        return await self.http_client.get(url, **kwargs)\n\n    async def post(\n        self,\n        url: str,\n        payment: Optional[PaymentAuthorization] = None,\n        **kwargs\n    ) -&gt; httpx.Response:\n        \"\"\"Make POST request with optional payment\"\"\"\n        pass\n\n    def payment_required(self, response: httpx.Response) -&gt; bool:\n        \"\"\"Check if response requires payment\"\"\"\n        return response.status_code == 402\n\n    def parse_payment_request(\n        self,\n        response: httpx.Response\n    ) -&gt; PaymentRequest:\n        \"\"\"Parse payment request from 402 response\"\"\"\n        if not self.payment_required(response):\n            raise ValueError(\"Response does not require payment\")\n        return PaymentRequest.from_dict(response.json())\n\n    async def create_payment(\n        self,\n        request: PaymentRequest,\n        amount: Optional[str] = None,\n    ) -&gt; PaymentAuthorization:\n        \"\"\"\n        Create and broadcast payment for a payment request\n\n        Args:\n            request: Payment request from 402 response\n            amount: Optional custom amount (defaults to max_amount_required)\n\n        Returns:\n            PaymentAuthorization with transaction hash\n        \"\"\"\n        # Validate request not expired\n        if request.is_expired():\n            raise PaymentExpiredError(request)\n\n        # Use provided amount or max required\n        pay_amount = amount or request.max_amount_required\n\n        # Check sufficient balance\n        balance = await self.processor.get_token_balance(\n            str(self.wallet_keypair.pubkey()),\n            request.asset_address\n        )\n        if balance &lt; float(pay_amount):\n            raise InsufficientFundsError(pay_amount, str(balance))\n\n        # Create transaction\n        tx = await self.processor.create_payment_transaction(\n            request, pay_amount, self.wallet_keypair\n        )\n\n        # Sign and broadcast\n        tx_hash = await self.processor.sign_and_send_transaction(\n            tx, self.wallet_keypair\n        )\n\n        # Create authorization\n        return PaymentAuthorization(\n            payment_id=request.payment_id,\n            actual_amount=pay_amount,\n            payment_address=request.payment_address,\n            asset_address=request.asset_address,\n            network=request.network,\n            timestamp=datetime.utcnow(),\n            signature=\"\",  # Solana signature\n            public_key=str(self.wallet_keypair.pubkey()),\n            transaction_hash=tx_hash,\n        )\n</code></pre>"},{"location":"openlibx402-technical-spec/#32-implicit-client-automatic-payment","title":"3.2 Implicit Client (Automatic Payment)","text":"<pre><code>class X402AutoClient:\n    \"\"\"\n    Implicit X402 client - automatically handles payment flow\n\n    Usage:\n        client = X402AutoClient(wallet_keypair)\n\n        # Automatically detects 402 and pays\n        response = await client.fetch(\"https://api.example.com/data\")\n        data = response.json()\n    \"\"\"\n\n    def __init__(\n        self,\n        wallet_keypair: Keypair,\n        rpc_url: Optional[str] = None,\n        max_retries: int = 1,\n        auto_retry: bool = True,\n        max_payment_amount: Optional[str] = None,  # Safety limit\n    ):\n        self.client = X402Client(wallet_keypair, rpc_url)\n        self.max_retries = max_retries\n        self.auto_retry = auto_retry\n        self.max_payment_amount = max_payment_amount\n\n    async def fetch(\n        self,\n        url: str,\n        method: str = \"GET\",\n        auto_retry: Optional[bool] = None,\n        **kwargs\n    ) -&gt; httpx.Response:\n        \"\"\"\n        Make HTTP request with automatic payment handling\n\n        Args:\n            url: Request URL\n            method: HTTP method\n            auto_retry: Override instance auto_retry setting\n            **kwargs: Additional arguments for httpx request\n\n        Returns:\n            Response after payment (if required)\n\n        Raises:\n            PaymentRequiredError: If auto_retry is False and 402 received\n            InsufficientFundsError: If wallet lacks funds\n            PaymentExpiredError: If payment request expired\n        \"\"\"\n        should_retry = auto_retry if auto_retry is not None else self.auto_retry\n\n        # Initial request\n        response = await self._make_request(method, url, **kwargs)\n\n        # Check if payment required\n        if self.client.payment_required(response):\n            if not should_retry:\n                raise PaymentRequiredError(\n                    self.client.parse_payment_request(response)\n                )\n\n            # Parse payment request\n            payment_request = self.client.parse_payment_request(response)\n\n            # Safety check\n            if self.max_payment_amount:\n                if float(payment_request.max_amount_required) &gt; float(self.max_payment_amount):\n                    raise ValueError(\n                        f\"Payment amount {payment_request.max_amount_required} \"\n                        f\"exceeds max allowed {self.max_payment_amount}\"\n                    )\n\n            # Create payment\n            authorization = await self.client.create_payment(payment_request)\n\n            # Retry with payment\n            response = await self._make_request(\n                method, url, payment=authorization, **kwargs\n            )\n\n        return response\n\n    async def _make_request(\n        self,\n        method: str,\n        url: str,\n        payment: Optional[PaymentAuthorization] = None,\n        **kwargs\n    ) -&gt; httpx.Response:\n        \"\"\"Internal method to make HTTP request\"\"\"\n        if method.upper() == \"GET\":\n            return await self.client.get(url, payment=payment, **kwargs)\n        elif method.upper() == \"POST\":\n            return await self.client.post(url, payment=payment, **kwargs)\n        # ... other methods\n\n    async def get(self, url: str, **kwargs) -&gt; httpx.Response:\n        \"\"\"GET request with auto-payment\"\"\"\n        return await self.fetch(url, method=\"GET\", **kwargs)\n\n    async def post(self, url: str, **kwargs) -&gt; httpx.Response:\n        \"\"\"POST request with auto-payment\"\"\"\n        return await self.fetch(url, method=\"POST\", **kwargs)\n</code></pre> <pre><code>// TypeScript versions with similar structure\n\nexport class X402Client {\n  // Explicit client implementation\n}\n\nexport class X402AutoClient {\n  // Implicit auto-payment client implementation\n}\n</code></pre>"},{"location":"openlibx402-technical-spec/#4-langchain-integration","title":"4. LangChain Integration","text":""},{"location":"openlibx402-technical-spec/#package-openlibx402-langchain-python-openlibx402langchain-typescript","title":"Package: <code>openlibx402-langchain</code> (Python) / <code>@openlibx402/langchain</code> (TypeScript)","text":""},{"location":"openlibx402-technical-spec/#purpose_3","title":"Purpose","text":"<p>Integrate X402 payments into LangChain agents via Tools and HTTP request middleware.</p>"},{"location":"openlibx402-technical-spec/#key-components_3","title":"Key Components","text":""},{"location":"openlibx402-technical-spec/#41-x402-tool-for-agents","title":"4.1 X402 Tool (For Agents)","text":"<pre><code>from langchain.tools import BaseTool\nfrom pydantic import Field\nfrom typing import Optional\n\nclass X402PaymentTool(BaseTool):\n    \"\"\"\n    LangChain tool that allows agents to make payments for API access\n\n    Usage:\n        wallet_keypair = load_keypair()\n\n        payment_tool = X402PaymentTool(\n            wallet_keypair=wallet_keypair,\n            name=\"pay_for_api\",\n            description=\"Make payment to access premium API data\"\n        )\n\n        agent = initialize_agent(\n            tools=[payment_tool, ...],\n            llm=llm,\n        )\n    \"\"\"\n\n    name: str = \"x402_payment\"\n    description: str = (\n        \"Make an X402 payment to access a paid API endpoint. \"\n        \"Input should be a JSON string with 'url' and optional 'amount'. \"\n        \"Returns the API response after successful payment.\"\n    )\n\n    wallet_keypair: Keypair = Field(exclude=True)\n    rpc_url: Optional[str] = Field(default=None, exclude=True)\n    max_payment: Optional[str] = Field(default=\"1.0\", exclude=True)\n\n    def _run(\n        self,\n        url: str,\n        amount: Optional[str] = None,\n        method: str = \"GET\",\n        **kwargs\n    ) -&gt; str:\n        \"\"\"Synchronous run (calls async version)\"\"\"\n        import asyncio\n        return asyncio.run(self._arun(url, amount, method, **kwargs))\n\n    async def _arun(\n        self,\n        url: str,\n        amount: Optional[str] = None,\n        method: str = \"GET\",\n        **kwargs\n    ) -&gt; str:\n        \"\"\"\n        Make paid API request\n\n        Args:\n            url: API endpoint URL\n            amount: Optional payment amount override\n            method: HTTP method\n            **kwargs: Additional request parameters\n\n        Returns:\n            API response as string\n        \"\"\"\n        client = X402AutoClient(\n            wallet_keypair=self.wallet_keypair,\n            rpc_url=self.rpc_url,\n            max_payment_amount=self.max_payment,\n        )\n\n        try:\n            response = await client.fetch(url, method=method, **kwargs)\n            return response.text\n        except X402Error as e:\n            return f\"Payment error: {e.code} - {e.message}\"\n</code></pre>"},{"location":"openlibx402-technical-spec/#42-request-middleware-intercept-all-api-calls","title":"4.2 Request Middleware (Intercept All API Calls)","text":"<pre><code>from langchain.requests import RequestsWrapper\nfrom typing import Dict, Any, Optional\n\nclass X402RequestsWrapper(RequestsWrapper):\n    \"\"\"\n    Drop-in replacement for LangChain's RequestsWrapper with X402 support\n\n    Usage:\n        from langchain.agents import load_tools\n\n        wallet_keypair = load_keypair()\n\n        requests_wrapper = X402RequestsWrapper(\n            wallet_keypair=wallet_keypair\n        )\n\n        # Use with LangChain tools that make HTTP requests\n        tools = load_tools(\n            [\"requests_all\"],\n            llm=llm,\n            requests_wrapper=requests_wrapper\n        )\n    \"\"\"\n\n    def __init__(\n        self,\n        wallet_keypair: Keypair,\n        rpc_url: Optional[str] = None,\n        max_payment: Optional[str] = \"1.0\",\n        **kwargs\n    ):\n        super().__init__(**kwargs)\n        self.client = X402AutoClient(\n            wallet_keypair=wallet_keypair,\n            rpc_url=rpc_url,\n            max_payment_amount=max_payment,\n        )\n\n    async def aget(self, url: str, **kwargs) -&gt; str:\n        \"\"\"Async GET with X402 support\"\"\"\n        response = await self.client.get(url, **kwargs)\n        return response.text\n\n    async def apost(self, url: str, **kwargs) -&gt; str:\n        \"\"\"Async POST with X402 support\"\"\"\n        response = await self.client.post(url, **kwargs)\n        return response.text\n\n    def get(self, url: str, **kwargs) -&gt; str:\n        \"\"\"Sync GET with X402 support\"\"\"\n        import asyncio\n        return asyncio.run(self.aget(url, **kwargs))\n\n    def post(self, url: str, **kwargs) -&gt; str:\n        \"\"\"Sync POST with X402 support\"\"\"\n        import asyncio\n        return asyncio.run(self.apost(url, **kwargs))\n</code></pre>"},{"location":"openlibx402-technical-spec/#43-integration-utilities","title":"4.3 Integration Utilities","text":"<pre><code>from langchain.chat_models import ChatOpenAI\nfrom langchain.agents import initialize_agent, AgentType\n\ndef create_x402_agent(\n    wallet_keypair: Keypair,\n    llm: Optional[Any] = None,\n    tools: Optional[list] = None,\n    rpc_url: Optional[str] = None,\n    max_payment: str = \"1.0\",\n    **agent_kwargs\n):\n    \"\"\"\n    Convenience function to create LangChain agent with X402 support\n\n    Usage:\n        agent = create_x402_agent(\n            wallet_keypair=my_keypair,\n            llm=ChatOpenAI(),\n            tools=[custom_tool_1, custom_tool_2],\n            max_payment=\"5.0\"\n        )\n\n        response = agent.run(\"Get me premium market data from api.example.com\")\n    \"\"\"\n    from langchain.agents import load_tools\n\n    # Create X402-enabled requests wrapper\n    requests_wrapper = X402RequestsWrapper(\n        wallet_keypair=wallet_keypair,\n        rpc_url=rpc_url,\n        max_payment=max_payment,\n    )\n\n    # Load standard tools with X402 wrapper\n    x402_tools = load_tools(\n        [\"requests_all\"],\n        llm=llm,\n        requests_wrapper=requests_wrapper\n    )\n\n    # Add custom tools\n    if tools:\n        x402_tools.extend(tools)\n\n    # Create agent\n    agent = initialize_agent(\n        tools=x402_tools,\n        llm=llm or ChatOpenAI(),\n        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n        **agent_kwargs\n    )\n\n    return agent\n</code></pre>"},{"location":"openlibx402-technical-spec/#5-langgraph-integration","title":"5. LangGraph Integration","text":""},{"location":"openlibx402-technical-spec/#package-openlibx402-langgraph-python-openlibx402langgraph-typescript","title":"Package: <code>openlibx402-langgraph</code> (Python) / <code>@openlibx402/langgraph</code> (TypeScript)","text":""},{"location":"openlibx402-technical-spec/#purpose_4","title":"Purpose","text":"<p>Integrate X402 payments into LangGraph workflows as nodes and conditional edges.</p>"},{"location":"openlibx402-technical-spec/#recommended-patterns","title":"Recommended Patterns","text":""},{"location":"openlibx402-technical-spec/#51-payment-node","title":"5.1 Payment Node","text":"<pre><code>from typing import TypedDict, Annotated\nfrom langgraph.graph import StateGraph, END\nfrom solders.keypair import Keypair\n\nclass AgentState(TypedDict):\n    \"\"\"State for LangGraph agent with payment support\"\"\"\n    messages: list\n    api_url: str\n    api_response: str\n    payment_required: bool\n    payment_completed: bool\n    payment_error: Optional[str]\n    wallet_keypair: Keypair\n\ndef payment_node(state: AgentState) -&gt; AgentState:\n    \"\"\"\n    LangGraph node that handles X402 payment\n\n    Usage in graph:\n        workflow = StateGraph(AgentState)\n        workflow.add_node(\"fetch_api\", fetch_api_node)\n        workflow.add_node(\"make_payment\", payment_node)\n        workflow.add_node(\"process_response\", process_response_node)\n\n        workflow.add_conditional_edges(\n            \"fetch_api\",\n            check_payment_required,\n            {\n                \"payment_required\": \"make_payment\",\n                \"success\": \"process_response\"\n            }\n        )\n    \"\"\"\n    client = X402AutoClient(\n        wallet_keypair=state[\"wallet_keypair\"],\n        auto_retry=True,\n    )\n\n    try:\n        response = asyncio.run(\n            client.fetch(state[\"api_url\"])\n        )\n        state[\"api_response\"] = response.text\n        state[\"payment_completed\"] = True\n        state[\"payment_error\"] = None\n    except X402Error as e:\n        state[\"payment_error\"] = f\"{e.code}: {e.message}\"\n        state[\"payment_completed\"] = False\n\n    return state\n\ndef check_payment_required(state: AgentState) -&gt; str:\n    \"\"\"Conditional edge function\"\"\"\n    if state.get(\"payment_required\"):\n        return \"payment_required\"\n    elif state.get(\"api_response\"):\n        return \"success\"\n    else:\n        return \"error\"\n</code></pre>"},{"location":"openlibx402-technical-spec/#52-payment-aware-api-node","title":"5.2 Payment-Aware API Node","text":"<pre><code>async def fetch_with_payment_node(state: AgentState) -&gt; AgentState:\n    \"\"\"\n    Combined node that fetches API and handles payment automatically\n\n    This is simpler than separate nodes but gives less control\n    \"\"\"\n    client = X402AutoClient(\n        wallet_keypair=state[\"wallet_keypair\"],\n        max_payment_amount=\"1.0\",\n    )\n\n    try:\n        response = await client.fetch(\n            state[\"api_url\"],\n            method=\"GET\"\n        )\n        state[\"api_response\"] = response.text\n        state[\"payment_completed\"] = True\n    except InsufficientFundsError as e:\n        state[\"payment_error\"] = f\"Insufficient funds: need {e.required_amount}\"\n    except X402Error as e:\n        state[\"payment_error\"] = f\"{e.code}: {e.message}\"\n\n    return state\n</code></pre>"},{"location":"openlibx402-technical-spec/#53-example-workflow","title":"5.3 Example Workflow","text":"<pre><code>from langgraph.graph import StateGraph, END\n\ndef create_x402_workflow(wallet_keypair: Keypair) -&gt; StateGraph:\n    \"\"\"\n    Create a LangGraph workflow with X402 payment support\n\n    Workflow:\n        1. Determine what API to call\n        2. Check if payment required\n        3. Make payment if needed\n        4. Process response\n    \"\"\"\n\n    workflow = StateGraph(AgentState)\n\n    # Add nodes\n    workflow.add_node(\"plan\", planning_node)\n    workflow.add_node(\"fetch_api\", fetch_api_node)\n    workflow.add_node(\"make_payment\", payment_node)\n    workflow.add_node(\"process\", process_response_node)\n\n    # Set entry point\n    workflow.set_entry_point(\"plan\")\n\n    # Add edges\n    workflow.add_edge(\"plan\", \"fetch_api\")\n\n    workflow.add_conditional_edges(\n        \"fetch_api\",\n        check_payment_required,\n        {\n            \"payment_required\": \"make_payment\",\n            \"success\": \"process\",\n            \"error\": END\n        }\n    )\n\n    workflow.add_edge(\"make_payment\", \"fetch_api\")  # Retry after payment\n    workflow.add_edge(\"process\", END)\n\n    return workflow.compile()\n</code></pre>"},{"location":"openlibx402-technical-spec/#54-helper-functions","title":"5.4 Helper Functions","text":"<pre><code>def create_payment_capable_graph(\n    state_schema: type,\n    wallet_keypair: Keypair,\n    rpc_url: Optional[str] = None,\n) -&gt; StateGraph:\n    \"\"\"\n    Create a StateGraph with X402 payment capabilities built-in\n\n    Automatically adds wallet_keypair to state and provides helper methods\n    \"\"\"\n    pass\n\ndef add_payment_node(\n    graph: StateGraph,\n    node_name: str = \"x402_payment\",\n    max_payment: str = \"1.0\",\n) -&gt; StateGraph:\n    \"\"\"Add a payment node to existing graph\"\"\"\n    pass\n</code></pre>"},{"location":"openlibx402-technical-spec/#6-error-handling-retry-logic","title":"6. Error Handling &amp; Retry Logic","text":""},{"location":"openlibx402-technical-spec/#automatic-retry-configuration","title":"Automatic Retry Configuration","text":"<pre><code>from dataclasses import dataclass\n\n@dataclass\nclass RetryConfig:\n    \"\"\"Configuration for automatic retry behavior\"\"\"\n    enabled: bool = True\n    max_retries: int = 1  # For payment, 1 retry is usually sufficient\n    retry_on_402: bool = True  # Retry when 402 received\n    retry_on_network_error: bool = True\n    exponential_backoff: bool = False  # Usually not needed for 402\n\nclass X402ClientWithRetry:\n    \"\"\"Client with configurable retry logic\"\"\"\n\n    def __init__(\n        self,\n        wallet_keypair: Keypair,\n        retry_config: Optional[RetryConfig] = None,\n    ):\n        self.wallet_keypair = wallet_keypair\n        self.retry_config = retry_config or RetryConfig()\n        self.client = X402AutoClient(\n            wallet_keypair=wallet_keypair,\n            auto_retry=retry_config.enabled if retry_config else True,\n        )\n</code></pre>"},{"location":"openlibx402-technical-spec/#error-code-reference","title":"Error Code Reference","text":"<pre><code>ERROR_CODES = {\n    \"PAYMENT_REQUIRED\": {\n        \"code\": \"PAYMENT_REQUIRED\",\n        \"message\": \"Payment is required to access this resource\",\n        \"retry\": True,\n        \"user_action\": \"Ensure wallet has sufficient funds and retry\"\n    },\n    \"PAYMENT_EXPIRED\": {\n        \"code\": \"PAYMENT_EXPIRED\",\n        \"message\": \"Payment request has expired\",\n        \"retry\": True,\n        \"user_action\": \"Request a new payment authorization\"\n    },\n    \"INSUFFICIENT_FUNDS\": {\n        \"code\": \"INSUFFICIENT_FUNDS\",\n        \"message\": \"Wallet has insufficient token balance\",\n        \"retry\": False,\n        \"user_action\": \"Add funds to wallet\"\n    },\n    \"PAYMENT_VERIFICATION_FAILED\": {\n        \"code\": \"PAYMENT_VERIFICATION_FAILED\",\n        \"message\": \"Server could not verify payment\",\n        \"retry\": True,\n        \"user_action\": \"Contact API provider if issue persists\"\n    },\n    \"TRANSACTION_BROADCAST_FAILED\": {\n        \"code\": \"TRANSACTION_BROADCAST_FAILED\",\n        \"message\": \"Failed to broadcast transaction to blockchain\",\n        \"retry\": True,\n        \"user_action\": \"Check network connection and RPC endpoint\"\n    },\n    \"INVALID_PAYMENT_REQUEST\": {\n        \"code\": \"INVALID_PAYMENT_REQUEST\",\n        \"message\": \"Payment request format is invalid\",\n        \"retry\": False,\n        \"user_action\": \"Contact API provider\"\n    },\n}\n</code></pre>"},{"location":"openlibx402-technical-spec/#7-testing-development","title":"7. Testing &amp; Development","text":""},{"location":"openlibx402-technical-spec/#test-utilities","title":"Test Utilities","text":"<pre><code># In openlibx402-core\n\nclass MockSolanaPaymentProcessor(SolanaPaymentProcessor):\n    \"\"\"Mock processor for testing without real blockchain\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.transactions: list = []\n        self.balance = 100.0  # Mock balance\n\n    async def create_payment_transaction(self, *args, **kwargs):\n        \"\"\"Return mock transaction\"\"\"\n        return MockTransaction()\n\n    async def sign_and_send_transaction(self, *args, **kwargs):\n        \"\"\"Return mock tx hash\"\"\"\n        tx_hash = f\"mock_tx_{len(self.transactions)}\"\n        self.transactions.append(tx_hash)\n        return tx_hash\n\n    async def verify_transaction(self, *args, **kwargs):\n        \"\"\"Always verify successfully\"\"\"\n        return True\n\n    async def get_token_balance(self, *args, **kwargs):\n        \"\"\"Return mock balance\"\"\"\n        return self.balance\n\nclass TestServer:\n    \"\"\"Mock X402 server for testing\"\"\"\n\n    def __init__(self, payment_address: str, token_mint: str):\n        self.payment_address = payment_address\n        self.token_mint = token_mint\n        self.payments_received: list = []\n\n    def require_payment(self, amount: str, resource: str):\n        \"\"\"Decorator that adds payment requirement\"\"\"\n        pass\n\n    def start(self, port: int = 8402):\n        \"\"\"Start test server\"\"\"\n        pass\n</code></pre>"},{"location":"openlibx402-technical-spec/#example-test","title":"Example Test","text":"<pre><code>import pytest\nfrom openlibx402_core.testing import MockSolanaPaymentProcessor, TestServer\n\n@pytest.mark.asyncio\nasync def test_payment_flow():\n    \"\"\"Test complete payment flow\"\"\"\n    # Setup test server\n    server = TestServer(\n        payment_address=\"mock_address\",\n        token_mint=\"mock_usdc\"\n    )\n    server.start(port=8402)\n\n    # Create client with mock processor\n    keypair = Keypair()  # Generate test keypair\n    client = X402AutoClient(wallet_keypair=keypair)\n    client.client.processor = MockSolanaPaymentProcessor()\n\n    # Make request to paywalled endpoint\n    response = await client.fetch(\"http://localhost:8402/premium-data\")\n\n    # Verify payment was made\n    assert response.status_code == 200\n    assert len(client.client.processor.transactions) == 1\n\n    # Cleanup\n    server.stop()\n</code></pre>"},{"location":"openlibx402-technical-spec/#8-example-implementations","title":"8. Example Implementations","text":""},{"location":"openlibx402-technical-spec/#81-fastapi-server-example","title":"8.1 FastAPI Server Example","text":"<pre><code># examples/fastapi-server/main.py\n\nfrom fastapi import FastAPI, Depends\nfrom openlibx402_fastapi import payment_required, X402Config, init_x402\nfrom solders.keypair import Keypair\nimport os\n\n# Initialize X402\nconfig = X402Config(\n    payment_address=os.getenv(\"PAYMENT_WALLET_ADDRESS\"),\n    token_mint=os.getenv(\"USDC_MINT_ADDRESS\"),\n    network=\"solana-devnet\",\n)\ninit_x402(config)\n\napp = FastAPI()\n\n# Simple decorator approach\n@app.get(\"/premium-data\")\n@payment_required(\n    amount=\"0.10\",\n    payment_address=config.payment_address,\n    token_mint=config.token_mint,\n    description=\"Access to premium market data\"\n)\nasync def get_premium_data():\n    return {\n        \"data\": \"This is premium content\",\n        \"price\": 100.50,\n        \"timestamp\": \"2025-05-06T10:00:00Z\"\n    }\n\n# Dependency injection approach\nfrom openlibx402_fastapi import verify_payment_factory\n\n@app.get(\"/expensive-data\")\nasync def get_expensive_data(\n    payment = Depends(\n        verify_payment_factory(\n            amount=\"1.00\",\n            payment_address=config.payment_address,\n            token_mint=config.token_mint,\n        )\n    )\n):\n    return {\n        \"data\": \"Very expensive content\",\n        \"payment_id\": payment.payment_id,\n        \"amount_paid\": payment.actual_amount,\n    }\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"openlibx402-technical-spec/#82-langchain-agent-example","title":"8.2 LangChain Agent Example","text":"<pre><code># examples/langchain-agent/main.py\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.agents import initialize_agent, AgentType\nfrom openlibx402_langchain import X402PaymentTool, X402RequestsWrapper\nfrom solders.keypair import Keypair\nimport os\nimport json\n\n# Load wallet\nwith open(\"wallet.json\") as f:\n    wallet_data = json.load(f)\n    keypair = Keypair.from_bytes(bytes(wallet_data))\n\n# Create X402-enabled tools\npayment_tool = X402PaymentTool(\n    wallet_keypair=keypair,\n    max_payment=\"5.0\",\n    rpc_url=\"https://api.devnet.solana.com\"\n)\n\n# Create requests wrapper for automatic payment handling\nrequests_wrapper = X402RequestsWrapper(\n    wallet_keypair=keypair,\n    max_payment=\"1.0\"\n)\n\n# Load LangChain tools with X402 support\nfrom langchain.agents import load_tools\ntools = load_tools(\n    [\"requests_all\"],\n    llm=ChatOpenAI(),\n    requests_wrapper=requests_wrapper\n)\ntools.append(payment_tool)\n\n# Create agent\nagent = initialize_agent(\n    tools=tools,\n    llm=ChatOpenAI(temperature=0),\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True\n)\n\n# Run agent\nresponse = agent.run(\n    \"Get me the premium market data from http://localhost:8000/premium-data \"\n    \"and tell me the current price\"\n)\n\nprint(response)\n</code></pre>"},{"location":"openlibx402-technical-spec/#83-langgraph-workflow-example","title":"8.3 LangGraph Workflow Example","text":"<pre><code># examples/langgraph-workflow/main.py\n\nfrom typing import TypedDict, Annotated, Optional\nfrom langgraph.graph import StateGraph, END\nfrom openlibx402_langgraph import payment_node, check_payment_required\nfrom openlibx402_client import X402AutoClient\nfrom solders.keypair import Keypair\nimport json\nimport asyncio\n\n# Define state\nclass ResearchState(TypedDict):\n    query: str\n    api_url: str\n    api_response: Optional[str]\n    payment_required: bool\n    payment_completed: bool\n    payment_error: Optional[str]\n    wallet_keypair: Keypair\n    final_answer: Optional[str]\n\n# Load wallet\nwith open(\"wallet.json\") as f:\n    wallet_data = json.load(f)\n    keypair = Keypair.from_bytes(bytes(wallet_data))\n\n# Define nodes\ndef plan_node(state: ResearchState) -&gt; ResearchState:\n    \"\"\"Determine which API to call\"\"\"\n    state[\"api_url\"] = \"http://localhost:8000/premium-data\"\n    state[\"payment_required\"] = False\n    return state\n\nasync def fetch_api_node(state: ResearchState) -&gt; ResearchState:\n    \"\"\"Fetch from API\"\"\"\n    client = X402AutoClient(\n        wallet_keypair=state[\"wallet_keypair\"],\n        auto_retry=False,  # We'll handle retry via graph\n    )\n\n    try:\n        response = await client.fetch(state[\"api_url\"])\n        state[\"api_response\"] = response.text\n        state[\"payment_required\"] = False\n    except Exception as e:\n        if \"402\" in str(e):\n            state[\"payment_required\"] = True\n        else:\n            state[\"payment_error\"] = str(e)\n\n    return state\n\ndef process_node(state: ResearchState) -&gt; ResearchState:\n    \"\"\"Process API response\"\"\"\n    if state[\"api_response\"]:\n        # Parse and format response\n        state[\"final_answer\"] = f\"Retrieved data: {state['api_response']}\"\n    return state\n\n# Build workflow\nworkflow = StateGraph(ResearchState)\n\nworkflow.add_node(\"plan\", plan_node)\nworkflow.add_node(\"fetch\", fetch_api_node)\nworkflow.add_node(\"payment\", payment_node)  # From openlibx402-langgraph\nworkflow.add_node(\"process\", process_node)\n\nworkflow.set_entry_point(\"plan\")\nworkflow.add_edge(\"plan\", \"fetch\")\n\nworkflow.add_conditional_edges(\n    \"fetch\",\n    check_payment_required,  # From openlibx402-langgraph\n    {\n        \"payment_required\": \"payment\",\n        \"success\": \"process\",\n        \"error\": END\n    }\n)\n\nworkflow.add_edge(\"payment\", \"fetch\")  # Retry after payment\nworkflow.add_edge(\"process\", END)\n\n# Compile and run\napp = workflow.compile()\n\n# Execute\nresult = app.invoke({\n    \"query\": \"Get premium market data\",\n    \"wallet_keypair\": keypair,\n})\n\nprint(result[\"final_answer\"])\n</code></pre>"},{"location":"openlibx402-technical-spec/#9-package-metadata-publishing","title":"9. Package Metadata &amp; Publishing","text":""},{"location":"openlibx402-technical-spec/#python-packages-pypi","title":"Python Packages (PyPI)","text":"<pre><code># pyproject.toml example for openlibx402-core\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"openlibx402-core\"\nversion = \"0.1.0\"\ndescription = \"Core implementation of X402 payment protocol\"\nauthors = [\n    {name = \"OpenLibX402 Contributors\", email = \"hello@openlibx402.org\"},\n]\nreadme = \"README.md\"\nlicense = {text = \"MIT\"}\nrequires-python = \"&gt;=3.8\"\ndependencies = [\n    \"solana&gt;=0.30.0\",\n    \"solders&gt;=0.18.0\",\n    \"httpx&gt;=0.24.0\",\n    \"pydantic&gt;=2.0.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest&gt;=7.0.0\",\n    \"pytest-asyncio&gt;=0.21.0\",\n    \"black&gt;=23.0.0\",\n    \"mypy&gt;=1.0.0\",\n]\n\n[project.urls]\nHomepage = \"https://github.com/openlibx402/openlibx402\"\nDocumentation = \"https://docs.openlibx402.org\"\nRepository = \"https://github.com/openlibx402/openlibx402\"\n</code></pre>"},{"location":"openlibx402-technical-spec/#typescript-packages-npm","title":"TypeScript Packages (npm)","text":"<pre><code>// package.json example for @openlibx402/core\n\n{\n  \"name\": \"@openlibx402/core\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Core implementation of X402 payment protocol\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"test\": \"jest\",\n    \"lint\": \"eslint src/**/*.ts\"\n  },\n  \"keywords\": [\"x402\", \"payments\", \"solana\", \"ai-agents\", \"web3\"],\n  \"author\": \"OpenLibX402 Contributors\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@solana/web3.js\": \"^1.87.0\",\n    \"@solana/spl-token\": \"^0.3.9\",\n    \"axios\": \"^1.6.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"jest\": \"^29.0.0\",\n    \"eslint\": \"^8.0.0\"\n  }\n}\n</code></pre>"},{"location":"openlibx402-technical-spec/#10-documentation-structure","title":"10. Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 getting-started/\n\u2502   \u251c\u2500\u2500 installation.md\n\u2502   \u251c\u2500\u2500 quickstart-server.md\n\u2502   \u251c\u2500\u2500 quickstart-client.md\n\u2502   \u2514\u2500\u2500 quickstart-agent.md\n\u251c\u2500\u2500 guides/\n\u2502   \u251c\u2500\u2500 fastapi-integration.md\n\u2502   \u251c\u2500\u2500 langchain-integration.md\n\u2502   \u251c\u2500\u2500 langgraph-integration.md\n\u2502   \u251c\u2500\u2500 wallet-setup.md\n\u2502   \u2514\u2500\u2500 testing-locally.md\n\u251c\u2500\u2500 api-reference/\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 server/\n\u2502   \u251c\u2500\u2500 client/\n\u2502   \u2514\u2500\u2500 integrations/\n\u251c\u2500\u2500 examples/\n\u2502   \u251c\u2500\u2500 basic-api-server.md\n\u2502   \u251c\u2500\u2500 autonomous-agent.md\n\u2502   \u251c\u2500\u2500 multi-agent-workflow.md\n\u2502   \u2514\u2500\u2500 error-handling.md\n\u2514\u2500\u2500 advanced/\n    \u251c\u2500\u2500 custom-settlement.md\n    \u251c\u2500\u2500 performance-optimization.md\n    \u2514\u2500\u2500 security-best-practices.md\n</code></pre>"},{"location":"openlibx402-technical-spec/#11-development-roadmap","title":"11. Development Roadmap","text":""},{"location":"openlibx402-technical-spec/#phase-1-core-fastapi","title":"Phase 1: Core &amp; FastAPI","text":"<ul> <li>\u2705 Core protocol implementation (Python + TypeScript)</li> <li>\u2705 Solana blockchain integration</li> <li>\u2705 FastAPI server middleware</li> <li>\u2705 Basic client (explicit &amp; implicit)</li> <li>\u2705 Error handling</li> <li>\u2705 Testing utilities</li> <li>\u2705 Example implementations</li> </ul>"},{"location":"openlibx402-technical-spec/#phase-2-ai-agent-integrations","title":"Phase 2: AI Agent Integrations","text":"<ul> <li>\u2705 LangChain tool &amp; middleware</li> <li>\u2705 LangGraph nodes &amp; helpers</li> <li>\ud83d\udd32 Additional agent framework support (AutoGPT, CrewAI)</li> </ul>"},{"location":"openlibx402-technical-spec/#phase-3-additional-frameworks","title":"Phase 3: Additional Frameworks","text":"<ul> <li>\ud83d\udd32 Express.js middleware (TypeScript)</li> <li>\ud83d\udd32 Next.js API routes helper</li> <li>\ud83d\udd32 Flask middleware (Python)</li> <li>\ud83d\udd32 Django middleware (Python)</li> <li>\ud83d\udd32 Hono middleware (TypeScript)</li> </ul>"},{"location":"openlibx402-technical-spec/#phase-4-enhanced-features","title":"Phase 4: Enhanced Features","text":"<ul> <li>\ud83d\udd32 Payment batching</li> <li>\ud83d\udd32 Subscription management</li> <li>\ud83d\udd32 Usage analytics</li> <li>\ud83d\udd32 Multi-chain support (Ethereum, Base L2)</li> <li>\ud83d\udd32 Alternative tokens (beyond USDC)</li> </ul>"},{"location":"openlibx402-technical-spec/#phase-5-ecosystem","title":"Phase 5: Ecosystem","text":"<ul> <li>\ud83d\udd32 CLI tools</li> <li>\ud83d\udd32 Admin dashboard</li> <li>\ud83d\udd32 Wallet UI components</li> <li>\ud83d\udd32 Browser extension</li> <li>\ud83d\udd32 Zapier/Make.com integrations</li> </ul>"},{"location":"openlibx402-technical-spec/#12-security-considerations","title":"12. Security Considerations","text":""},{"location":"openlibx402-technical-spec/#wallet-security","title":"Wallet Security","text":"<ul> <li>Never log private keys</li> <li>Use environment variables for sensitive data</li> <li>Recommend hardware wallets for production</li> <li>Implement rate limiting on payment endpoints</li> </ul>"},{"location":"openlibx402-technical-spec/#transaction-verification","title":"Transaction Verification","text":"<ul> <li>Always verify transactions on-chain</li> <li>Check recipient, amount, and token mint</li> <li>Implement replay attack protection via nonce</li> <li>Set reasonable expiration times (5-10 minutes)</li> </ul>"},{"location":"openlibx402-technical-spec/#api-security","title":"API Security","text":"<ul> <li>Implement CORS properly</li> <li>Use HTTPS in production</li> <li>Rate limit payment requests</li> <li>Validate all payment authorization fields</li> </ul>"},{"location":"openlibx402-technical-spec/#13-performance-optimization","title":"13. Performance Optimization","text":""},{"location":"openlibx402-technical-spec/#client-side","title":"Client-Side","text":"<ul> <li>Reuse HTTP connections (connection pooling)</li> <li>Cache payment authorizations (with expiry)</li> <li>Batch multiple API calls where possible</li> <li>Use WebSocket for high-frequency payments</li> </ul>"},{"location":"openlibx402-technical-spec/#server-side","title":"Server-Side","text":"<ul> <li>Async transaction verification</li> <li>Cache verified payments (Redis)</li> <li>Background transaction confirmation</li> <li>Load balancing for RPC calls</li> </ul>"},{"location":"openlibx402-technical-spec/#14-monitoring-observability","title":"14. Monitoring &amp; Observability","text":""},{"location":"openlibx402-technical-spec/#metrics-to-track","title":"Metrics to Track","text":"<ul> <li>Payment success rate</li> <li>Transaction confirmation time</li> <li>RPC endpoint latency</li> <li>Token balance (for auto-replenishment alerts)</li> <li>Error rates by type</li> </ul>"},{"location":"openlibx402-technical-spec/#logging","title":"Logging","text":"<pre><code>import logging\n\nlogger = logging.getLogger(\"openlibx402\")\n\n# Log payment requests\nlogger.info(f\"Payment required: {amount} for {resource}\")\n\n# Log successful payments\nlogger.info(f\"Payment verified: tx_hash={tx_hash}\")\n\n# Log errors with context\nlogger.error(\n    f\"Payment failed: {error_code}\",\n    extra={\n        \"payment_id\": payment_id,\n        \"wallet\": wallet_address,\n        \"amount\": amount,\n    }\n)\n</code></pre>"},{"location":"openlibx402-technical-spec/#end-of-technical-specification","title":"End of Technical Specification","text":"<p>This specification provides a comprehensive blueprint for implementing the OpenLibX402 library ecosystem. The architecture is modular, allowing for incremental development and easy addition of new framework integrations.</p>"},{"location":"quick-reference/","title":"OpenLibX402 Quick Reference Guide","text":""},{"location":"quick-reference/#installation","title":"Installation","text":"<pre><code># Python\npip install openlibx402-core openlibx402-fastapi openlibx402-client\npip install openlibx402-langchain openlibx402-langgraph\n\n# TypeScript\nnpm install @openlibx402/core @openlibx402/fastapi @openlibx402/client\nnpm install @openlibx402/langchain @openlibx402/langgraph\n</code></pre>"},{"location":"quick-reference/#fastapi-server-examples","title":"FastAPI Server Examples","text":""},{"location":"quick-reference/#simple-decorator-approach","title":"Simple Decorator Approach","text":"<pre><code>from fastapi import FastAPI\nfrom openlibx402_fastapi import payment_required\n\napp = FastAPI()\n\n@app.get(\"/premium-data\")\n@payment_required(\n    amount=\"0.10\",\n    payment_address=\"YOUR_WALLET_ADDRESS\",\n    token_mint=\"USDC_MINT_ADDRESS\",\n    network=\"solana-devnet\",\n    description=\"Access to premium market data\"\n)\nasync def get_premium_data():\n    return {\"data\": \"Premium content\", \"price\": 100.50}\n</code></pre>"},{"location":"quick-reference/#dependency-injection-approach","title":"Dependency Injection Approach","text":"<pre><code>from fastapi import FastAPI, Depends\nfrom openlibx402_fastapi import verify_payment_factory, PaymentAuthorization\n\napp = FastAPI()\n\n@app.get(\"/expensive-data\")\nasync def get_expensive_data(\n    payment: PaymentAuthorization = Depends(\n        verify_payment_factory(\n            amount=\"1.00\",\n            payment_address=\"YOUR_WALLET_ADDRESS\",\n            token_mint=\"USDC_MINT_ADDRESS\"\n        )\n    )\n):\n    return {\n        \"data\": \"Very expensive content\",\n        \"payment_id\": payment.payment_id,\n        \"amount_paid\": payment.actual_amount\n    }\n</code></pre>"},{"location":"quick-reference/#global-configuration","title":"Global Configuration","text":"<pre><code>from openlibx402_fastapi import X402Config, init_x402\n\nconfig = X402Config(\n    payment_address=\"YOUR_WALLET_ADDRESS\",\n    token_mint=\"USDC_MINT_ADDRESS\",\n    network=\"solana-devnet\",\n    default_amount=\"0.01\"\n)\ninit_x402(config)\n\n@app.get(\"/data\")\n@payment_required(amount=\"0.05\")  # Uses global config\nasync def get_data():\n    return {\"data\": \"content\"}\n</code></pre>"},{"location":"quick-reference/#client-examples","title":"Client Examples","text":""},{"location":"quick-reference/#explicit-client-manual-control","title":"Explicit Client (Manual Control)","text":"<pre><code>from openlibx402_client import X402Client\nfrom solders.keypair import Keypair\n\n# Load wallet\nkeypair = Keypair()  # Or load from file\n\n# Create client\nclient = X402Client(\n    wallet_keypair=keypair,\n    rpc_url=\"https://api.devnet.solana.com\"\n)\n\n# Make initial request\nresponse = await client.get(\"https://api.example.com/premium-data\")\n\n# Check if payment required\nif client.payment_required(response):\n    # Parse payment details\n    payment_request = client.parse_payment_request(response)\n    print(f\"Payment required: {payment_request.max_amount_required} USDC\")\n\n    # Create and send payment\n    authorization = await client.create_payment(payment_request)\n\n    # Retry with payment\n    response = await client.get(\n        \"https://api.example.com/premium-data\",\n        payment=authorization\n    )\n\ndata = response.json()\nprint(data)\n</code></pre>"},{"location":"quick-reference/#implicit-client-auto-payment","title":"Implicit Client (Auto-Payment)","text":"<pre><code>from openlibx402_client import X402AutoClient\nfrom solders.keypair import Keypair\n\n# Load wallet\nkeypair = Keypair()\n\n# Create auto-client\nclient = X402AutoClient(\n    wallet_keypair=keypair,\n    max_payment_amount=\"5.0\"  # Safety limit\n)\n\n# Make request - automatically handles 402 and payment\nresponse = await client.fetch(\"https://api.example.com/premium-data\")\ndata = response.json()\nprint(data)\n\n# Disable auto-retry for specific request\nresponse = await client.fetch(\n    \"https://api.example.com/data\",\n    auto_retry=False\n)\n</code></pre>"},{"location":"quick-reference/#langchain-examples","title":"LangChain Examples","text":""},{"location":"quick-reference/#using-x402paymenttool","title":"Using X402PaymentTool","text":"<pre><code>from langchain.chat_models import ChatOpenAI\nfrom langchain.agents import initialize_agent, AgentType\nfrom openlibx402_langchain import X402PaymentTool\nfrom solders.keypair import Keypair\n\n# Load wallet\nkeypair = Keypair()\n\n# Create payment tool\npayment_tool = X402PaymentTool(\n    wallet_keypair=keypair,\n    max_payment=\"5.0\",\n    name=\"pay_for_api\",\n    description=\"Make payment to access premium API data\"\n)\n\n# Create agent with payment tool\nagent = initialize_agent(\n    tools=[payment_tool],\n    llm=ChatOpenAI(temperature=0),\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True\n)\n\n# Agent can now pay for APIs\nresponse = agent.run(\n    \"Get me the premium market data from https://api.example.com/premium-data\"\n)\nprint(response)\n</code></pre>"},{"location":"quick-reference/#using-x402requestswrapper-middleware","title":"Using X402RequestsWrapper (Middleware)","text":"<pre><code>from langchain.agents import load_tools, initialize_agent, AgentType\nfrom langchain.chat_models import ChatOpenAI\nfrom openlibx402_langchain import X402RequestsWrapper\nfrom solders.keypair import Keypair\n\n# Load wallet\nkeypair = Keypair()\n\n# Create X402-enabled requests wrapper\nrequests_wrapper = X402RequestsWrapper(\n    wallet_keypair=keypair,\n    max_payment=\"1.0\"\n)\n\n# Load standard tools with X402 wrapper\ntools = load_tools(\n    [\"requests_all\"],\n    llm=ChatOpenAI(),\n    requests_wrapper=requests_wrapper\n)\n\n# Create agent\nagent = initialize_agent(\n    tools=tools,\n    llm=ChatOpenAI(temperature=0),\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True\n)\n\n# All HTTP requests automatically handle X402 payments\nresponse = agent.run(\"Fetch data from https://api.example.com/premium-data\")\n</code></pre>"},{"location":"quick-reference/#convenience-function","title":"Convenience Function","text":"<pre><code>from openlibx402_langchain import create_x402_agent\nfrom langchain.chat_models import ChatOpenAI\nfrom solders.keypair import Keypair\n\n# Load wallet\nkeypair = Keypair()\n\n# Create agent with X402 support (one function!)\nagent = create_x402_agent(\n    wallet_keypair=keypair,\n    llm=ChatOpenAI(),\n    max_payment=\"5.0\"\n)\n\nresponse = agent.run(\"Get premium data from API\")\n</code></pre>"},{"location":"quick-reference/#langgraph-examples","title":"LangGraph Examples","text":""},{"location":"quick-reference/#basic-payment-node","title":"Basic Payment Node","text":"<pre><code>from typing import TypedDict\nfrom langgraph.graph import StateGraph, END\nfrom openlibx402_langgraph import payment_node, check_payment_required\nfrom openlibx402_client import X402AutoClient\nfrom solders.keypair import Keypair\n\n# Define state\nclass AgentState(TypedDict):\n    api_url: str\n    api_response: str\n    payment_required: bool\n    payment_completed: bool\n    payment_error: str | None\n    wallet_keypair: Keypair\n\n# Load wallet\nkeypair = Keypair()\n\n# Build workflow\nworkflow = StateGraph(AgentState)\n\nworkflow.add_node(\"fetch_api\", fetch_api_node)\nworkflow.add_node(\"make_payment\", payment_node)  # From openlibx402-langgraph\nworkflow.add_node(\"process\", process_response_node)\n\nworkflow.set_entry_point(\"fetch_api\")\n\n# Conditional edge based on payment\nworkflow.add_conditional_edges(\n    \"fetch_api\",\n    check_payment_required,  # From openlibx402-langgraph\n    {\n        \"payment_required\": \"make_payment\",\n        \"success\": \"process\",\n        \"error\": END\n    }\n)\n\nworkflow.add_edge(\"make_payment\", \"fetch_api\")  # Retry after payment\nworkflow.add_edge(\"process\", END)\n\n# Compile and run\napp = workflow.compile()\nresult = app.invoke({\n    \"api_url\": \"https://api.example.com/data\",\n    \"wallet_keypair\": keypair,\n})\n</code></pre>"},{"location":"quick-reference/#combined-fetch-and-pay-node","title":"Combined Fetch-and-Pay Node","text":"<pre><code>from openlibx402_client import X402AutoClient\n\nasync def fetch_with_payment_node(state: AgentState) -&gt; AgentState:\n    \"\"\"Node that fetches API and handles payment automatically\"\"\"\n    client = X402AutoClient(\n        wallet_keypair=state[\"wallet_keypair\"],\n        max_payment_amount=\"1.0\"\n    )\n\n    try:\n        response = await client.fetch(state[\"api_url\"])\n        state[\"api_response\"] = response.text\n        state[\"payment_completed\"] = True\n    except Exception as e:\n        state[\"payment_error\"] = str(e)\n\n    return state\n\n# Use in workflow\nworkflow.add_node(\"fetch\", fetch_with_payment_node)\n</code></pre>"},{"location":"quick-reference/#error-handling","title":"Error Handling","text":""},{"location":"quick-reference/#catching-specific-errors","title":"Catching Specific Errors","text":"<pre><code>from openlibx402_core import (\n    InsufficientFundsError,\n    PaymentExpiredError,\n    PaymentVerificationError,\n    TransactionBroadcastError\n)\nfrom openlibx402_client import X402AutoClient\n\nclient = X402AutoClient(wallet_keypair=keypair)\n\ntry:\n    response = await client.fetch(\"https://api.example.com/data\")\n\nexcept InsufficientFundsError as e:\n    print(f\"Insufficient funds: need {e.required_amount}, have {e.available_amount}\")\n    # Prompt user to add funds\n\nexcept PaymentExpiredError as e:\n    print(\"Payment request expired, retrying...\")\n    # Automatically handled by auto-client, but you can catch it\n\nexcept TransactionBroadcastError as e:\n    print(f\"Transaction failed: {e.message}\")\n    # Check network connection\n\nexcept PaymentVerificationError as e:\n    print(f\"Payment verification failed: {e.message}\")\n    # Contact API provider\n</code></pre>"},{"location":"quick-reference/#handling-all-x402-errors","title":"Handling All X402 Errors","text":"<pre><code>from openlibx402_core import X402Error\n\ntry:\n    response = await client.fetch(\"https://api.example.com/data\")\nexcept X402Error as e:\n    print(f\"X402 Error: {e.code}\")\n    print(f\"Message: {e.message}\")\n    print(f\"Details: {e.details}\")\n</code></pre>"},{"location":"quick-reference/#configuration","title":"Configuration","text":""},{"location":"quick-reference/#environment-variables","title":"Environment Variables","text":"<pre><code># .env file\nX402_PAYMENT_ADDRESS=YourSolanaWalletAddress\nX402_TOKEN_MINT=USDC_MINT_ADDRESS\nX402_NETWORK=solana-devnet\nX402_RPC_URL=https://api.devnet.solana.com\nX402_DEFAULT_AMOUNT=0.01\n</code></pre> <pre><code>from openlibx402_fastapi import X402Config, init_x402\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nconfig = X402Config(\n    payment_address=os.getenv(\"X402_PAYMENT_ADDRESS\"),\n    token_mint=os.getenv(\"X402_TOKEN_MINT\"),\n    network=os.getenv(\"X402_NETWORK\", \"solana-devnet\"),\n    rpc_url=os.getenv(\"X402_RPC_URL\"),\n)\n\ninit_x402(config)\n</code></pre>"},{"location":"quick-reference/#testing","title":"Testing","text":""},{"location":"quick-reference/#mock-payment-processor","title":"Mock Payment Processor","text":"<pre><code>from openlibx402_core.testing import MockSolanaPaymentProcessor\n\n# Use in tests\nprocessor = MockSolanaPaymentProcessor()\nprocessor.balance = 100.0  # Set mock balance\n\nclient = X402AutoClient(wallet_keypair=test_keypair)\nclient.client.processor = processor\n\n# Make requests without real blockchain\nresponse = await client.fetch(\"http://localhost:8000/data\")\n\n# Check mock transactions\nassert len(processor.transactions) == 1\n</code></pre>"},{"location":"quick-reference/#test-server","title":"Test Server","text":"<pre><code>from openlibx402_core.testing import TestServer\n\n# Create test server\nserver = TestServer(\n    payment_address=\"test_address\",\n    token_mint=\"test_usdc\"\n)\n\n@server.require_payment(amount=\"0.10\", resource=\"/test\")\nasync def test_endpoint():\n    return {\"data\": \"test\"}\n\nserver.start(port=8402)\n\n# Test against mock server\n# ...\n\nserver.stop()\n</code></pre>"},{"location":"quick-reference/#wallet-setup","title":"Wallet Setup","text":""},{"location":"quick-reference/#creating-a-new-wallet","title":"Creating a New Wallet","text":"<pre><code>from solders.keypair import Keypair\nimport json\n\n# Generate new keypair\nkeypair = Keypair()\n\n# Save to file\nwallet_data = list(bytes(keypair))\nwith open(\"wallet.json\", \"w\") as f:\n    json.dump(wallet_data, f)\n\nprint(f\"Wallet address: {keypair.pubkey()}\")\n</code></pre>"},{"location":"quick-reference/#loading-wallet","title":"Loading Wallet","text":"<pre><code>from solders.keypair import Keypair\nimport json\n\n# Load from file\nwith open(\"wallet.json\") as f:\n    wallet_data = json.load(f)\n    keypair = Keypair.from_bytes(bytes(wallet_data))\n\nprint(f\"Loaded wallet: {keypair.pubkey()}\")\n</code></pre>"},{"location":"quick-reference/#getting-devnet-sol-for-fees","title":"Getting Devnet SOL (for fees)","text":"<pre><code># Use Solana CLI\nsolana airdrop 1 YOUR_WALLET_ADDRESS --url devnet\n\n# Or use web faucet\n# https://faucet.solana.com\n</code></pre>"},{"location":"quick-reference/#common-patterns","title":"Common Patterns","text":""},{"location":"quick-reference/#retry-configuration","title":"Retry Configuration","text":"<pre><code>from openlibx402_client import X402AutoClient, RetryConfig\n\nconfig = RetryConfig(\n    enabled=True,\n    max_retries=1,\n    retry_on_402=True,\n    retry_on_network_error=True\n)\n\nclient = X402AutoClient(\n    wallet_keypair=keypair,\n    retry_config=config\n)\n</code></pre>"},{"location":"quick-reference/#custom-payment-amount","title":"Custom Payment Amount","text":"<pre><code># Pay custom amount (less than max required)\nresponse = await client.get(\"https://api.example.com/data\")\n\nif client.payment_required(response):\n    request = client.parse_payment_request(response)\n    # Pay 50% of requested amount (if API supports it)\n    auth = await client.create_payment(request, amount=\"0.05\")\n    response = await client.get(url, payment=auth)\n</code></pre>"},{"location":"quick-reference/#multiple-apis","title":"Multiple APIs","text":"<pre><code># Configure client with higher payment limit\nclient = X402AutoClient(\n    wallet_keypair=keypair,\n    max_payment_amount=\"10.0\"\n)\n\n# Fetch from multiple paid APIs\ndata1 = await client.fetch(\"https://api1.example.com/data\")\ndata2 = await client.fetch(\"https://api2.example.com/data\")\ndata3 = await client.fetch(\"https://api3.example.com/data\")\n\n# Client automatically handles payment for each\n</code></pre>"},{"location":"quick-reference/#devnet-quick-start","title":"Devnet Quick Start","text":"<pre><code># 1. Install packages\npip install openlibx402-core openlibx402-fastapi openlibx402-client\n\n# 2. Create wallet\npython -c \"from solders.keypair import Keypair; import json; kp = Keypair(); \\\njson.dump(list(bytes(kp)), open('wallet.json', 'w')); \\\nprint(f'Address: {kp.pubkey()}')\"\n\n# 3. Get devnet SOL\nsolana airdrop 1 &lt;YOUR_ADDRESS&gt; --url devnet\n\n# 4. Run example server\ncd examples/fastapi-server\npip install -r requirements.txt\npython main.py\n\n# 5. Run example client\ncd examples/langchain-agent\npip install -r requirements.txt\npython main.py\n</code></pre>"},{"location":"quick-reference/#production-checklist","title":"Production Checklist","text":"<ul> <li>[ ] Use mainnet RPC URL</li> <li>[ ] Use real USDC mint address</li> <li>[ ] Never log private keys</li> <li>[ ] Use HTTPS for all APIs</li> <li>[ ] Implement rate limiting</li> <li>[ ] Set up monitoring</li> <li>[ ] Configure reasonable payment timeouts</li> <li>[ ] Implement proper error handling</li> <li>[ ] Use environment variables for config</li> <li>[ ] Test with small amounts first</li> <li>[ ] Set maximum payment limits</li> <li>[ ] Implement wallet balance monitoring</li> </ul>"},{"location":"quick-reference/#resources","title":"Resources","text":"<ul> <li>X402 Whitepaper: https://www.x402.org/x402-whitepaper.pdf</li> <li>Solana Docs: https://docs.solana.com</li> <li>SPL Token: https://spl.solana.com/token</li> <li>FastAPI: https://fastapi.tiangolo.com</li> <li>LangChain: https://python.langchain.com</li> <li>LangGraph: https://langchain-ai.github.io/langgraph</li> </ul>"},{"location":"quick-reference/#common-issues","title":"Common Issues","text":""},{"location":"quick-reference/#insufficient-funds-error","title":"\"Insufficient Funds\" Error","text":"<ul> <li>Check wallet balance: <code>solana balance &lt;ADDRESS&gt; --url devnet</code></li> <li>Ensure you have both SOL (for fees) and USDC (for payment)</li> </ul>"},{"location":"quick-reference/#transaction-failed-error","title":"\"Transaction Failed\" Error","text":"<ul> <li>Check network connectivity</li> <li>Verify RPC endpoint is accessible</li> <li>Ensure devnet is not experiencing issues</li> </ul>"},{"location":"quick-reference/#payment-verification-failed","title":"\"Payment Verification Failed\"","text":"<ul> <li>Transaction may not be confirmed yet</li> <li>Check transaction on Solana Explorer</li> <li>Verify payment address and amount are correct</li> </ul>"},{"location":"quick-reference/#import-errors","title":"Import Errors","text":"<ul> <li>Ensure all packages are installed</li> <li>Check Python version (requires 3.8+)</li> <li>Verify virtual environment is activated</li> </ul> <p>Happy Building! \ud83d\ude80</p>"},{"location":"examples/","title":"OpenLibX402 Examples","text":"<p>This directory contains example applications demonstrating the X402 payment protocol in both Python and TypeScript.</p>"},{"location":"examples/#structure","title":"\ud83d\udcc1 Structure","text":"<pre><code>examples/\n\u251c\u2500\u2500 python/                      # Python examples\n\u2502   \u251c\u2500\u2500 fastapi-server/          # FastAPI server with payment endpoints\n\u2502   \u251c\u2500\u2500 langchain-agent/         # LangChain agent with autonomous payments\n\u2502   \u2514\u2500\u2500 langgraph-workflow/      # LangGraph workflow with payment nodes\n\u2502\n\u2514\u2500\u2500 typescript/                  # TypeScript examples\n    \u251c\u2500\u2500 express-server/          # Express.js server with payment endpoints\n    \u251c\u2500\u2500 langchain-agent/         # LangChain.js agent with autonomous payments\n    \u2514\u2500\u2500 langgraph-workflow/      # LangGraph.js workflow with payment nodes\n</code></pre>"},{"location":"examples/#python-examples","title":"\ud83d\udc0d Python Examples","text":""},{"location":"examples/#fastapi-server","title":"FastAPI Server","text":"<p>HTTP API server that requires payments for premium endpoints.</p> <p>Location: <code>python/fastapi-server/</code></p> <p>Run: <pre><code>cd python/fastapi-server\nuv run uvicorn main:app --reload\n</code></pre></p> <p>Endpoints: - <code>GET /</code> - API info (free) - <code>GET /free-data</code> - Free endpoint - <code>GET /premium-data</code> - Requires 0.10 USDC - <code>GET /expensive-data</code> - Requires 1.00 USDC - <code>GET /tiered-data/{tier}</code> - Requires 0.05 USDC</p>"},{"location":"examples/#langchain-agent","title":"LangChain Agent","text":"<p>AI agent that autonomously pays for API access.</p> <p>Location: <code>python/langchain-agent/</code></p> <p>Run: <pre><code>cd python/langchain-agent\nexport OPENAI_API_KEY=\"your-key\"\nuv run python main.py\n</code></pre></p> <p>Features: - Autonomous payment capability - Multiple API access - Custom tool integration</p>"},{"location":"examples/#langgraph-workflow","title":"LangGraph Workflow","text":"<p>Workflows with payment nodes for accessing paid APIs.</p> <p>Location: <code>python/langgraph-workflow/</code></p> <p>Run: <pre><code>cd python/langgraph-workflow\nuv run python main.py\n</code></pre></p> <p>Features: - Payment nodes - Conditional routing - Multi-step workflows</p>"},{"location":"examples/#typescript-examples","title":"\ud83d\udce6 TypeScript Examples","text":""},{"location":"examples/#expressjs-server","title":"Express.js Server","text":"<p>HTTP API server that requires payments for premium endpoints.</p> <p>Location: <code>typescript/express-server/</code></p> <p>Run: <pre><code>cd typescript/express-server\npnpm install &amp;&amp; pnpm run build &amp;&amp; pnpm start\n</code></pre></p> <p>Or from root: <pre><code>make example-express\n</code></pre></p> <p>Endpoints: - <code>GET /</code> - API info (free) - <code>GET /free-data</code> - Free endpoint - <code>GET /premium-data</code> - Requires 0.10 USDC - <code>GET /expensive-data</code> - Requires 1.00 USDC - <code>GET /tiered-data/:tier</code> - Requires 0.05 USDC</p>"},{"location":"examples/#langchainjs-agent","title":"LangChain.js Agent","text":"<p>AI agent that autonomously pays for API access.</p> <p>Location: <code>typescript/langchain-agent/</code></p> <p>Run: <pre><code>cd typescript/langchain-agent\ncp .env.example .env\n# Edit .env and add OPENAI_API_KEY\npnpm install &amp;&amp; pnpm run build &amp;&amp; pnpm start\n</code></pre></p> <p>Or from root: <pre><code>make example-langchain\n</code></pre></p> <p>Features: - Autonomous payment capability - Multiple API access - Custom tool configuration</p>"},{"location":"examples/#langgraphjs-workflow","title":"LangGraph.js Workflow","text":"<p>Workflows with payment nodes for accessing paid APIs.</p> <p>Location: <code>typescript/langgraph-workflow/</code></p> <p>Run: <pre><code>cd typescript/langgraph-workflow\npnpm install &amp;&amp; pnpm run build &amp;&amp; pnpm start\n</code></pre></p> <p>Or from root: <pre><code>make example-langgraph\n</code></pre></p> <p>Features: - Payment nodes - Conditional routing - Multi-step workflows</p>"},{"location":"examples/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"examples/#1-start-a-server","title":"1. Start a Server","text":"<p>Python FastAPI: <pre><code>cd examples/python/fastapi-server\nuv run uvicorn main:app --reload\n</code></pre></p> <p>TypeScript Express: <pre><code>cd examples/typescript/express-server\npnpm install &amp;&amp; pnpm run build &amp;&amp; pnpm start\n</code></pre></p> <p>Server will be available at: - Python: <code>http://localhost:8000</code> - TypeScript: <code>http://localhost:3000</code></p>"},{"location":"examples/#2-test-with-client","title":"2. Test with Client","text":"<p>Python Client: <pre><code>from openlibx402_client import X402AutoClient\nfrom solders.keypair import Keypair\n\nkeypair = Keypair()  # Load your keypair\nclient = X402AutoClient(keypair)\n\nresponse = await client.get(\"http://localhost:8000/premium-data\")\nprint(response.json())\n</code></pre></p> <p>TypeScript Client: <pre><code>import { X402AutoClient } from '@openlibx402/client';\nimport { Keypair } from '@solana/web3.js';\n\nconst keypair = Keypair.generate();  // Load your keypair\nconst client = new X402AutoClient(keypair);\n\nconst response = await client.get('http://localhost:3000/premium-data');\nconsole.log(response.data);\n</code></pre></p>"},{"location":"examples/#3-run-agent-examples","title":"3. Run Agent Examples","text":"<p>Make sure the server is running first!</p> <p>Python LangChain: <pre><code>cd examples/python/langchain-agent\nexport OPENAI_API_KEY=\"your-key\"\nuv run python main.py\n</code></pre></p> <p>TypeScript LangChain.js: <pre><code>cd examples/typescript/langchain-agent\nexport OPENAI_API_KEY=\"your-key\"\npnpm run dev\n</code></pre></p>"},{"location":"examples/#prerequisites","title":"\ud83d\udd11 Prerequisites","text":""},{"location":"examples/#all-examples","title":"All Examples","text":"<ul> <li>Solana wallet with:</li> <li>SOL for transaction fees</li> <li>USDC tokens for payments</li> <li>Running server (FastAPI or Express)</li> </ul>"},{"location":"examples/#agent-examples-additional","title":"Agent Examples (Additional)","text":"<ul> <li>OpenAI API key (for LangChain/LangChain.js agents)</li> <li>Set as <code>OPENAI_API_KEY</code> environment variable</li> </ul>"},{"location":"examples/#wallet-setup","title":"\ud83d\udcb0 Wallet Setup","text":"<p>All examples will create a <code>wallet.json</code> file on first run.</p> <p>Fund your wallet:</p> <pre><code># Get SOL on devnet\nsolana airdrop 1 &lt;YOUR_ADDRESS&gt; --url devnet\n\n# Get USDC from a faucet\n# Visit: https://spl-token-faucet.com/\n</code></pre> <p>\u26a0\ufe0f Security Warning: - Never commit <code>wallet.json</code> to version control - In production, use secure key management - The wallet files are in <code>.gitignore</code></p>"},{"location":"examples/#testing-flow","title":"\ud83e\uddea Testing Flow","text":"<ol> <li>Start Server: Run FastAPI or Express server</li> <li>Test Free Endpoint: <code>curl http://localhost:3000/free-data</code></li> <li>Test Paid Endpoint: <code>curl http://localhost:3000/premium-data</code></li> <li>Should return 402 Payment Required</li> <li>Run Agent: Agent automatically handles payment</li> <li>Verify: Check agent receives data</li> </ol>"},{"location":"examples/#learn-more","title":"\ud83d\udcda Learn More","text":"<p>Each example directory contains its own detailed README:</p> <ul> <li>FastAPI Server</li> <li>Python LangChain Agent</li> <li>Python LangGraph Workflow</li> <li>Express.js Server</li> <li>TypeScript LangChain Agent</li> <li>TypeScript LangGraph Workflow</li> </ul>"},{"location":"examples/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"examples/#server-wont-start","title":"Server Won't Start","text":"<ul> <li>Check port isn't already in use</li> <li>Verify dependencies are installed</li> <li>Check wallet address is configured</li> </ul>"},{"location":"examples/#agent-cant-pay","title":"Agent Can't Pay","text":"<ul> <li>Ensure server is running</li> <li>Fund wallet with SOL and USDC</li> <li>Check OpenAI API key is set</li> <li>Verify server URL is correct</li> </ul>"},{"location":"examples/#payment-verification-fails","title":"Payment Verification Fails","text":"<ul> <li>Check RPC URL is accessible</li> <li>Ensure transaction was broadcast</li> <li>Verify wallet has sufficient funds</li> </ul>"},{"location":"examples/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<ol> <li>Run the server examples</li> <li>Test with simple curl requests</li> <li>Try the agent examples</li> <li>Build your own application!</li> </ol> <p>For more information, see the main documentation.</p>"},{"location":"examples/python/fastapi-server/","title":"FastAPI Server Example","text":"<p>Example FastAPI server with X402 payment requirements.</p>"},{"location":"examples/python/fastapi-server/#setup","title":"Setup","text":"<ol> <li> <p>Install dependencies: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Configure environment: <pre><code>cp .env.example .env\n# Edit .env with your wallet address and token mint\n</code></pre></p> </li> <li> <p>Run the server: <pre><code>python main.py\n</code></pre></p> </li> <li> <p>Visit http://localhost:8000/docs for API documentation</p> </li> </ol>"},{"location":"examples/python/fastapi-server/#testing","title":"Testing","text":""},{"location":"examples/python/fastapi-server/#get-free-data","title":"Get free data:","text":"<pre><code>curl http://localhost:8000/free-data\n</code></pre>"},{"location":"examples/python/fastapi-server/#try-premium-endpoint-will-return-402","title":"Try premium endpoint (will return 402):","text":"<pre><code>curl http://localhost:8000/premium-data\n</code></pre>"},{"location":"examples/python/fastapi-server/#with-payment-client","title":"With payment client:","text":"<p>See the langchain-agent example for how to make payments automatically.</p>"},{"location":"examples/python/fastapi-server/#endpoints","title":"Endpoints","text":"<ul> <li><code>GET /</code> - API information (free)</li> <li><code>GET /free-data</code> - Free data (no payment)</li> <li><code>GET /premium-data</code> - Premium data (0.10 USDC)</li> <li><code>GET /expensive-data</code> - Expensive AI data (1.00 USDC)</li> <li><code>GET /tiered-data/{tier}</code> - Tiered access (0.05 USDC)</li> </ul>"},{"location":"examples/python/langchain-agent/","title":"LangChain Agent Example","text":"<p>Example LangChain agent with autonomous X402 payment capabilities.</p>"},{"location":"examples/python/langchain-agent/#setup","title":"Setup","text":"<ol> <li> <p>Install dependencies: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Set OpenAI API key: <pre><code>export OPENAI_API_KEY='your-key-here'\n</code></pre></p> </li> <li> <p>Create and fund wallet: <pre><code># Run the script once to generate wallet\npython main.py\n\n# Fund the wallet with SOL (for transaction fees)\nsolana airdrop 1 YOUR_WALLET_ADDRESS --url devnet\n\n# You'll also need USDC on devnet for payments\n# Use a faucet or swap service\n</code></pre></p> </li> <li> <p>Start the FastAPI server (in another terminal): <pre><code>cd ../fastapi-server\npython main.py\n</code></pre></p> </li> <li> <p>Run the agent examples: <pre><code>python main.py\n</code></pre></p> </li> </ol>"},{"location":"examples/python/langchain-agent/#what-it-does","title":"What it does","text":"<p>The examples demonstrate three scenarios:</p>"},{"location":"examples/python/langchain-agent/#example-1-simple-agent","title":"Example 1: Simple Agent","text":"<p>Creates an agent using the convenience function that can autonomously detect and pay for 402 responses.</p>"},{"location":"examples/python/langchain-agent/#example-2-custom-tools","title":"Example 2: Custom Tools","text":"<p>Shows how to combine X402 payment capabilities with other LangChain tools.</p>"},{"location":"examples/python/langchain-agent/#example-3-multi-api","title":"Example 3: Multi-API","text":"<p>Demonstrates an agent making multiple payments to different APIs in a single workflow.</p>"},{"location":"examples/python/langchain-agent/#key-features","title":"Key Features","text":"<ul> <li>Autonomous Payments: Agent detects 402 responses and pays automatically</li> <li>Safety Limits: <code>max_payment</code> parameter prevents overspending</li> <li>Transparent: Verbose mode shows payment decisions</li> <li>Flexible: Works with any X402-enabled API</li> </ul>"},{"location":"examples/python/langgraph-workflow/","title":"LangGraph Workflow Example","text":"<p>Example LangGraph workflows with X402 payment nodes.</p>"},{"location":"examples/python/langgraph-workflow/#setup","title":"Setup","text":"<ol> <li> <p>Install dependencies: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Create and fund wallet: <pre><code># Run the script once to generate wallet\npython main.py\n\n# Fund the wallet with SOL (for transaction fees)\nsolana airdrop 1 YOUR_WALLET_ADDRESS --url devnet\n</code></pre></p> </li> <li> <p>Start the FastAPI server (in another terminal): <pre><code>cd ../fastapi-server\npython main.py\n</code></pre></p> </li> <li> <p>Run the workflow examples: <pre><code>python main.py\n</code></pre></p> </li> </ol>"},{"location":"examples/python/langgraph-workflow/#what-it-does","title":"What it does","text":"<p>The examples demonstrate three workflow patterns:</p>"},{"location":"examples/python/langgraph-workflow/#example-1-simple-workflow","title":"Example 1: Simple Workflow","text":"<p>Uses the convenience function to create a basic workflow with payment handling.</p>"},{"location":"examples/python/langgraph-workflow/#example-2-custom-workflow","title":"Example 2: Custom Workflow","text":"<p>Shows how to build a workflow with separate fetch and payment nodes for more control.</p>"},{"location":"examples/python/langgraph-workflow/#example-3-multi-step-workflow","title":"Example 3: Multi-Step Workflow","text":"<p>Demonstrates a workflow that accesses multiple paid APIs sequentially, handling payments for each.</p>"},{"location":"examples/python/langgraph-workflow/#key-features","title":"Key Features","text":"<ul> <li>Modular Design: Payment logic is isolated in dedicated nodes</li> <li>Conditional Routing: Workflows automatically route to payment nodes when needed</li> <li>Error Handling: Graceful handling of payment errors</li> <li>Composable: Easy to add payment capabilities to existing workflows</li> </ul>"},{"location":"examples/python/langgraph-workflow/#workflow-patterns","title":"Workflow Patterns","text":""},{"location":"examples/python/langgraph-workflow/#pattern-1-combined-node","title":"Pattern 1: Combined Node","text":"<p><pre><code>workflow.add_node(\"fetch\", fetch_with_payment_node)\n</code></pre> Simplest approach - fetch and pay in one node.</p>"},{"location":"examples/python/langgraph-workflow/#pattern-2-separate-nodes","title":"Pattern 2: Separate Nodes","text":"<p><pre><code>workflow.add_node(\"fetch\", fetch_node)\nworkflow.add_node(\"pay\", payment_node)\nworkflow.add_conditional_edges(\"fetch\", check_payment_required, {...})\n</code></pre> More control - explicit payment step.</p>"},{"location":"examples/python/langgraph-workflow/#pattern-3-multi-step","title":"Pattern 3: Multi-Step","text":"<p><pre><code># Loop through multiple APIs\nworkflow.add_conditional_edges(\"collect\", check_more_apis, {\n    \"fetch_next\": \"fetch\",\n    \"complete\": END\n})\n</code></pre> Complex workflows with multiple payments.</p>"},{"location":"examples/typescript/express-server/","title":"Express.js Server Example with X402 Payment Support","text":"<p>This example demonstrates how to create an Express.js API server with X402 payment requirements for specific endpoints.</p>"},{"location":"examples/typescript/express-server/#features","title":"Features","text":"<ul> <li>Free endpoints - Public access without payment</li> <li>Premium endpoints - Require payment to access</li> <li>Automatic payment verification - Built-in Solana blockchain verification</li> <li>Flexible pricing - Different amounts for different endpoints</li> <li>TypeScript - Full type safety</li> </ul>"},{"location":"examples/typescript/express-server/#setup","title":"Setup","text":""},{"location":"examples/typescript/express-server/#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"examples/typescript/express-server/#2-configure-environment","title":"2. Configure Environment","text":"<p>Create a <code>.env</code> file based on <code>.env.example</code>:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit <code>.env</code> with your Solana wallet details:</p> <pre><code>PAYMENT_WALLET_ADDRESS=your_solana_wallet_address_here\nUSDC_MINT_ADDRESS=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\nSOLANA_RPC_URL=https://api.devnet.solana.com\nPORT=3000\n</code></pre>"},{"location":"examples/typescript/express-server/#3-build-and-run","title":"3. Build and Run","text":"<pre><code># Build TypeScript\nnpm run build\n\n# Start server\nnpm start\n\n# Or run in development mode\nnpm run dev\n</code></pre> <p>The server will start on <code>http://localhost:3000</code>.</p>"},{"location":"examples/typescript/express-server/#api-endpoints","title":"API Endpoints","text":""},{"location":"examples/typescript/express-server/#free-endpoints","title":"Free Endpoints","text":"<ul> <li>GET / - API information (no payment)</li> <li>GET /free-data - Free data access (no payment)</li> </ul>"},{"location":"examples/typescript/express-server/#paid-endpoints","title":"Paid Endpoints","text":"<ul> <li>GET /premium-data - Premium data (0.10 USDC)</li> <li>GET /expensive-data - AI inference (1.00 USDC)</li> <li>GET /tiered-data/:tier - Tiered content (0.05 USDC)</li> <li>POST /process-data - Data processing (0.25 USDC)</li> </ul>"},{"location":"examples/typescript/express-server/#usage-examples","title":"Usage Examples","text":""},{"location":"examples/typescript/express-server/#free-endpoint","title":"Free Endpoint","text":"<pre><code>curl http://localhost:3000/free-data\n</code></pre> <p>Response: <pre><code>{\n  \"data\": \"This is free content available to everyone\",\n  \"price\": 0,\n  \"access\": \"public\"\n}\n</code></pre></p>"},{"location":"examples/typescript/express-server/#paid-endpoint-without-payment","title":"Paid Endpoint (Without Payment)","text":"<pre><code>curl http://localhost:3000/premium-data\n</code></pre> <p>Response (402 Payment Required): ```json {   \"max_amount_required\": \"0.10\",   \"asset_type\": \"SPL\",   \"asset_address\": \"DEMO_USDC_MINT\",   \"payment_address\": \"DEMO_WALLET_ADDRESS\",   \"network\": \"solana-devnet\",   \"expires_at\": \"2025-01-01T10:05:00Z\",   \"nonce\": \"...\",   \"payment_id\": \"...\",</p>"},{"location":"examples/typescript/langchain-agent/","title":"LangChain.js Payment Tool Example","text":"<p>This example demonstrates the X402 payment tool for LangChain.js, which enables payment capabilities that can be integrated with AI agents.</p>"},{"location":"examples/typescript/langchain-agent/#features","title":"Features","text":"<ul> <li>X402 Payment Tool: LangChain.js tool for making payments to access APIs</li> <li>Multiple APIs: Examples of accessing multiple paid APIs</li> <li>Custom Behavior: Configurable payment limits and RPC URLs</li> <li>TypeScript: Full type safety and modern async/await patterns</li> <li>Agent-Ready: Tool can be integrated with LangChain agents for autonomous payments</li> </ul>"},{"location":"examples/typescript/langchain-agent/#overview","title":"Overview","text":"<p>The X402PaymentTool can be integrated with LangChain.js agents to enable autonomous payment capabilities. This example shows direct tool usage for clarity. In production, integrate this tool with LangChain agents that use LLMs to decide when to make payments.</p>"},{"location":"examples/typescript/langchain-agent/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Express.js Server: The express-server example must be running    <pre><code>cd ../express-server\npnpm install &amp;&amp; pnpm run build &amp;&amp; pnpm start\n</code></pre></p> </li> <li> <p>Wallet with Funds: You need a Solana wallet with:</p> </li> <li>SOL for transaction fees</li> <li>USDC tokens for payments (on devnet)</li> </ol>"},{"location":"examples/typescript/langchain-agent/#setup","title":"Setup","text":"<ol> <li> <p>Install dependencies:    <pre><code>pnpm install\n</code></pre></p> </li> <li> <p>The first run will create a wallet file (<code>wallet.json</code>)</p> </li> <li>Important: Fund this wallet with SOL and USDC on devnet</li> <li>Get SOL: <code>solana airdrop 1 &lt;ADDRESS&gt; --url devnet</code></li> <li>Get USDC: Use a devnet faucet</li> </ol>"},{"location":"examples/typescript/langchain-agent/#running-examples","title":"Running Examples","text":"<pre><code># Build\npnpm run build\n\n# Run\npnpm start\n\n# Or run in dev mode\npnpm run dev\n</code></pre>"},{"location":"examples/typescript/langchain-agent/#examples","title":"Examples","text":""},{"location":"examples/typescript/langchain-agent/#example-1-simple-payment-tool","title":"Example 1: Simple Payment Tool","text":"<p>Demonstrates basic tool usage: - Creates X402PaymentTool - Makes payment to access a single API - Shows direct tool invocation</p>"},{"location":"examples/typescript/langchain-agent/#example-2-multiple-apis","title":"Example 2: Multiple APIs","text":"<p>Demonstrates accessing multiple paid APIs: - Higher payment limit for multiple payments - Sequential API access - Handles multiple 402 responses</p>"},{"location":"examples/typescript/langchain-agent/#example-3-custom-payment-behavior","title":"Example 3: Custom Payment Behavior","text":"<p>Shows customization options: - Custom RPC URL - Specific payment limits - Custom tool names and descriptions</p>"},{"location":"examples/typescript/langchain-agent/#integration-with-langchain-agents","title":"Integration with LangChain Agents","text":"<p>To use this tool with a LangChain agent:</p> <p>```typescript import { createX402PaymentTool } from '@openlibx402/langchain'; import { ChatOpenAI } from '@langchain/openai';</p> <p>// Create the payment tool const paymentTool = createX402PaymentTool({   walletKeypair: yourKeypair,   maxPayment: '5.0', });</p> <p>// Use with your LangChain agent const agent = createYourAgent({   llm: new ChatOpenAI(),   tools: [paymentTool, ...otherTools], });</p> <p>// Agent can now autonomously make payments const result = await agent.invoke({   input: 'Get data from http://localhost:3000/premium-data' });</p>"},{"location":"examples/typescript/langgraph-workflow/","title":"LangGraph.js Workflow with X402 Payment Support","text":"<p>This example demonstrates how to build LangGraph.js workflows that include payment nodes for accessing paid APIs using the X402 payment protocol.</p>"},{"location":"examples/typescript/langgraph-workflow/#features","title":"Features","text":"<ul> <li>Payment Nodes: Reusable nodes for handling payments in workflows</li> <li>Conditional Routing: Route based on payment requirements</li> <li>Multi-Step Workflows: Access multiple paid APIs in sequence</li> <li>State Management: Proper state handling for payment status</li> <li>TypeScript: Full type safety with LangGraph.js</li> </ul>"},{"location":"examples/typescript/langgraph-workflow/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Express.js Server: The express-server example must be running    <pre><code>cd ../express-server\npnpm install &amp;&amp; pnpm run build &amp;&amp; pnpm start\n</code></pre></p> </li> <li> <p>Wallet with Funds: You need a Solana wallet with:</p> </li> <li>SOL for transaction fees</li> <li>USDC tokens for payments (on devnet)</li> </ol>"},{"location":"examples/typescript/langgraph-workflow/#setup","title":"Setup","text":"<ol> <li> <p>Install dependencies:    <pre><code>pnpm install\n</code></pre></p> </li> <li> <p>Create <code>.env</code> file (optional):    <pre><code>cp .env.example .env\n</code></pre></p> </li> <li> <p>The first run will create a wallet file (<code>wallet.json</code>)</p> </li> <li>Important: Fund this wallet with SOL and USDC on devnet</li> <li>Get SOL: <code>solana airdrop 1 &lt;ADDRESS&gt; --url devnet</code></li> <li>Get USDC: Use a devnet faucet</li> </ol>"},{"location":"examples/typescript/langgraph-workflow/#running-examples","title":"Running Examples","text":"<pre><code># Build\npnpm run build\n\n# Run\npnpm start\n\n# Or run in dev mode\npnpm run dev\n</code></pre>"},{"location":"examples/typescript/langgraph-workflow/#examples","title":"Examples","text":""},{"location":"examples/typescript/langgraph-workflow/#example-1-simple-payment-workflow","title":"Example 1: Simple Payment Workflow","text":"<p>Uses <code>fetchWithPaymentNode</code> for easy payment integration: - Single node handles both fetch and payment - Minimal configuration - Automatic payment handling</p>"},{"location":"examples/typescript/langgraph-workflow/#example-2-custom-workflow-with-conditional-payment","title":"Example 2: Custom Workflow with Conditional Payment","text":"<p>Demonstrates explicit payment handling: - Separate fetch and payment nodes - Conditional routing based on payment requirements - Custom error handling</p>"},{"location":"examples/typescript/langgraph-workflow/#example-3-multi-step-research-workflow","title":"Example 3: Multi-Step Research Workflow","text":"<p>Shows complex multi-API workflows: - Access multiple paid APIs sequentially - Collect and aggregate results - State management across multiple steps</p>"},{"location":"examples/typescript/langgraph-workflow/#how-it-works","title":"How It Works","text":""},{"location":"examples/typescript/langgraph-workflow/#payment-flow","title":"Payment Flow","text":"<ol> <li>Fetch Node: Attempts to fetch API</li> <li>Check Payment: Determines if payment is required (402 response)</li> <li>Payment Node: Creates and broadcasts payment if needed</li> <li>Process Node: Processes API response</li> <li>State Updates: Tracks payment status throughout workflow</li> </ol>"},{"location":"examples/typescript/langgraph-workflow/#state-management","title":"State Management","text":"<p>```typescript interface PaymentState {   wallet_keypair: Keypair;   api_url: string;   api_response?: string;   payment_required?: boolean;   payment_completed?: boolean;   payment_error?: string;   max_payment_amount?: string; }</p>"},{"location":"packages/python/openlibx402-client/","title":"OpenLibX402 Client","text":"<p>HTTP client library for making X402-enabled API calls with automatic payment handling.</p>"},{"location":"packages/python/openlibx402-client/#installation","title":"Installation","text":"<pre><code>pip install openlibx402-client\n</code></pre>"},{"location":"packages/python/openlibx402-client/#features","title":"Features","text":"<ul> <li>Explicit Client: Manual control over payment flow</li> <li>Implicit Client: Automatic payment handling</li> <li>Support for all HTTP methods (GET, POST, PUT, DELETE)</li> <li>Safety limits with <code>max_payment_amount</code></li> <li>Configurable retry behavior</li> </ul>"},{"location":"packages/python/openlibx402-client/#usage","title":"Usage","text":""},{"location":"packages/python/openlibx402-client/#explicit-client-manual-control","title":"Explicit Client (Manual Control)","text":"<pre><code>from openlibx402_client import X402Client\nfrom solders.keypair import Keypair\n\n# Load wallet\nkeypair = Keypair()\n\n# Create client\nclient = X402Client(wallet_keypair=keypair)\n\n# Make request\nresponse = await client.get(\"https://api.example.com/data\")\n\n# Check if payment required\nif client.payment_required(response):\n    payment_request = client.parse_payment_request(response)\n\n    # Create payment\n    authorization = await client.create_payment(payment_request)\n\n    # Retry with payment\n    response = await client.get(\n        \"https://api.example.com/data\",\n        payment=authorization\n    )\n\ndata = response.json()\n</code></pre>"},{"location":"packages/python/openlibx402-client/#implicit-client-auto-payment","title":"Implicit Client (Auto-Payment)","text":"<pre><code>from openlibx402_client import X402AutoClient\nfrom solders.keypair import Keypair\n\n# Create auto-client\nclient = X402AutoClient(\n    wallet_keypair=keypair,\n    max_payment_amount=\"5.0\"  # Safety limit\n)\n\n# Automatically handles 402 and pays\nresponse = await client.fetch(\"https://api.example.com/data\")\ndata = response.json()\n</code></pre>"},{"location":"packages/python/openlibx402-client/#disable-auto-retry","title":"Disable Auto-Retry","text":"<pre><code># Disable auto-retry for specific request\ntry:\n    response = await client.fetch(\n        \"https://api.example.com/data\",\n        auto_retry=False\n    )\nexcept PaymentRequiredError as e:\n    print(f\"Payment required: {e.payment_request.max_amount_required}\")\n</code></pre>"},{"location":"packages/python/openlibx402-client/#license","title":"License","text":"<p>MIT</p>"},{"location":"packages/python/openlibx402-core/","title":"OpenLibX402 Core","text":"<p>Core implementation of the X402 payment protocol for autonomous AI agent payments.</p>"},{"location":"packages/python/openlibx402-core/#installation","title":"Installation","text":"<pre><code>pip install openlibx402-core\n</code></pre>"},{"location":"packages/python/openlibx402-core/#features","title":"Features","text":"<ul> <li>Payment request and authorization data structures</li> <li>Solana blockchain integration</li> <li>Comprehensive error handling</li> <li>Testing utilities with mock implementations</li> </ul>"},{"location":"packages/python/openlibx402-core/#usage","title":"Usage","text":"<pre><code>from openlibx402_core import PaymentRequest, PaymentAuthorization, SolanaPaymentProcessor\n\n# Create payment processor\nprocessor = SolanaPaymentProcessor(\"https://api.devnet.solana.com\")\n\n# Parse payment request from 402 response\nrequest = PaymentRequest.from_dict(response_data)\n\n# Create and send payment\ntransaction = await processor.create_payment_transaction(request, \"0.10\", keypair)\ntx_hash = await processor.sign_and_send_transaction(transaction, keypair)\n\n# Verify transaction\nverified = await processor.verify_transaction(\n    tx_hash,\n    request.payment_address,\n    \"0.10\",\n    request.asset_address\n)\n</code></pre>"},{"location":"packages/python/openlibx402-core/#testing","title":"Testing","text":"<pre><code>from openlibx402_core.testing import MockSolanaPaymentProcessor, create_mock_payment_request\n\n# Use mock processor in tests\nprocessor = MockSolanaPaymentProcessor()\nprocessor.balance = 100.0\n\nrequest = create_mock_payment_request(amount=\"0.10\")\n</code></pre>"},{"location":"packages/python/openlibx402-core/#license","title":"License","text":"<p>MIT</p>"},{"location":"packages/python/openlibx402-fastapi/","title":"OpenLibX402 FastAPI","text":"<p>FastAPI middleware and decorators for X402 payment protocol.</p>"},{"location":"packages/python/openlibx402-fastapi/#installation","title":"Installation","text":"<pre><code>pip install openlibx402-fastapi\n</code></pre>"},{"location":"packages/python/openlibx402-fastapi/#features","title":"Features","text":"<ul> <li>Simple decorator for adding payment requirements</li> <li>Dependency injection pattern for FastAPI</li> <li>Global configuration management</li> <li>Automatic payment verification</li> <li>402 response builders</li> </ul>"},{"location":"packages/python/openlibx402-fastapi/#usage","title":"Usage","text":""},{"location":"packages/python/openlibx402-fastapi/#decorator-approach","title":"Decorator Approach","text":"<pre><code>from fastapi import FastAPI\nfrom openlibx402_fastapi import payment_required\n\napp = FastAPI()\n\n@app.get(\"/premium-data\")\n@payment_required(\n    amount=\"0.10\",\n    payment_address=\"YOUR_WALLET_ADDRESS\",\n    token_mint=\"USDC_MINT_ADDRESS\",\n    description=\"Access to premium market data\"\n)\nasync def get_premium_data():\n    return {\"data\": \"Premium content\"}\n</code></pre>"},{"location":"packages/python/openlibx402-fastapi/#dependency-injection","title":"Dependency Injection","text":"<pre><code>from fastapi import FastAPI, Depends\nfrom openlibx402_fastapi import verify_payment_factory, PaymentAuthorization\n\napp = FastAPI()\n\n@app.get(\"/expensive-data\")\nasync def get_expensive_data(\n    payment: PaymentAuthorization = Depends(\n        verify_payment_factory(\n            amount=\"1.00\",\n            payment_address=\"YOUR_WALLET_ADDRESS\",\n            token_mint=\"USDC_MINT_ADDRESS\"\n        )\n    )\n):\n    return {\n        \"data\": \"Very expensive content\",\n        \"payment_id\": payment.payment_id\n    }\n</code></pre>"},{"location":"packages/python/openlibx402-fastapi/#global-configuration","title":"Global Configuration","text":"<pre><code>from openlibx402_fastapi import X402Config, init_x402\n\nconfig = X402Config(\n    payment_address=\"YOUR_WALLET_ADDRESS\",\n    token_mint=\"USDC_MINT_ADDRESS\",\n    network=\"solana-devnet\"\n)\ninit_x402(config)\n\n@app.get(\"/data\")\n@payment_required(amount=\"0.05\")  # Uses global config\nasync def get_data():\n    return {\"data\": \"content\"}\n</code></pre>"},{"location":"packages/python/openlibx402-fastapi/#license","title":"License","text":"<p>MIT</p>"},{"location":"packages/python/openlibx402-langchain/","title":"OpenLibX402 LangChain","text":"<p>LangChain integration for X402 payment protocol.</p>"},{"location":"packages/python/openlibx402-langchain/#installation","title":"Installation","text":"<pre><code>pip install openlibx402-langchain\n</code></pre>"},{"location":"packages/python/openlibx402-langchain/#features","title":"Features","text":"<ul> <li>X402PaymentTool for LangChain agents</li> <li>X402RequestsWrapper for automatic payment handling</li> <li>Convenience function for creating X402-enabled agents</li> </ul>"},{"location":"packages/python/openlibx402-langchain/#usage","title":"Usage","text":""},{"location":"packages/python/openlibx402-langchain/#using-x402paymenttool","title":"Using X402PaymentTool","text":"<pre><code>from langchain.chat_models import ChatOpenAI\nfrom langchain.agents import initialize_agent, AgentType\nfrom openlibx402_langchain import X402PaymentTool\nfrom solders.keypair import Keypair\n\nkeypair = Keypair()\n\npayment_tool = X402PaymentTool(\n    wallet_keypair=keypair,\n    max_payment=\"5.0\"\n)\n\nagent = initialize_agent(\n    tools=[payment_tool],\n    llm=ChatOpenAI(),\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION\n)\n\nresponse = agent.run(\"Get premium data from https://api.example.com/data\")\n</code></pre>"},{"location":"packages/python/openlibx402-langchain/#using-x402requestswrapper","title":"Using X402RequestsWrapper","text":"<pre><code>from langchain.agents import load_tools\nfrom openlibx402_langchain import X402RequestsWrapper\n\nrequests_wrapper = X402RequestsWrapper(\n    wallet_keypair=keypair,\n    max_payment=\"1.0\"\n)\n\ntools = load_tools(\n    [\"requests_all\"],\n    llm=ChatOpenAI(),\n    requests_wrapper=requests_wrapper\n)\n\nagent = initialize_agent(tools=tools, llm=ChatOpenAI())\n</code></pre>"},{"location":"packages/python/openlibx402-langchain/#convenience-function","title":"Convenience Function","text":"<pre><code>from openlibx402_langchain import create_x402_agent\n\nagent = create_x402_agent(\n    wallet_keypair=keypair,\n    max_payment=\"5.0\"\n)\n\nresponse = agent.run(\"Get premium data from API\")\n</code></pre>"},{"location":"packages/python/openlibx402-langchain/#license","title":"License","text":"<p>MIT</p>"},{"location":"packages/python/openlibx402-langgraph/","title":"OpenLibX402 LangGraph","text":"<p>LangGraph integration for X402 payment protocol.</p>"},{"location":"packages/python/openlibx402-langgraph/#installation","title":"Installation","text":"<pre><code>pip install openlibx402-langgraph\n</code></pre>"},{"location":"packages/python/openlibx402-langgraph/#features","title":"Features","text":"<ul> <li>Payment nodes for LangGraph workflows</li> <li>Async and sync node implementations</li> <li>Conditional edge functions for routing</li> <li>State management utilities</li> <li>Simple workflow creator</li> </ul>"},{"location":"packages/python/openlibx402-langgraph/#usage","title":"Usage","text":""},{"location":"packages/python/openlibx402-langgraph/#basic-payment-node","title":"Basic Payment Node","text":"<pre><code>from langgraph.graph import StateGraph, END\nfrom openlibx402_langgraph import payment_node, check_payment_required\nfrom solders.keypair import Keypair\n\nclass AgentState(TypedDict):\n    api_url: str\n    api_response: str\n    payment_required: bool\n    payment_completed: bool\n    wallet_keypair: Keypair\n\nworkflow = StateGraph(AgentState)\n\nworkflow.add_node(\"fetch\", fetch_api_node)\nworkflow.add_node(\"pay\", payment_node)\nworkflow.add_node(\"process\", process_node)\n\nworkflow.add_conditional_edges(\n    \"fetch\",\n    check_payment_required,\n    {\n        \"payment_required\": \"pay\",\n        \"success\": \"process\",\n        \"error\": END\n    }\n)\n\nworkflow.add_edge(\"pay\", \"fetch\")\nworkflow.add_edge(\"process\", END)\n\napp = workflow.compile()\n</code></pre>"},{"location":"packages/python/openlibx402-langgraph/#combined-fetch-payment-node","title":"Combined Fetch + Payment Node","text":"<pre><code>from openlibx402_langgraph import fetch_with_payment_node\n\nworkflow.add_node(\"fetch\", fetch_with_payment_node)\nworkflow.set_entry_point(\"fetch\")\nworkflow.add_edge(\"fetch\", \"process\")\n</code></pre>"},{"location":"packages/python/openlibx402-langgraph/#simple-workflow-helper","title":"Simple Workflow Helper","text":"<pre><code>from openlibx402_langgraph import create_simple_payment_workflow\n\nworkflow = create_simple_payment_workflow(\n    wallet_keypair=keypair,\n    api_url=\"https://api.example.com/data\"\n)\n\nresult = workflow({})\nprint(result[\"api_response\"])\n</code></pre>"},{"location":"packages/python/openlibx402-langgraph/#license","title":"License","text":"<p>MIT</p>"},{"location":"packages/typescript/openlibx402-client/","title":"@openlibx402/client","text":"<p>TypeScript HTTP client for X402 payment protocol.</p>"},{"location":"packages/typescript/openlibx402-client/#installation","title":"Installation","text":"<pre><code>npm install @openlibx402/client\n</code></pre>"},{"location":"packages/typescript/openlibx402-client/#features","title":"Features","text":"<ul> <li>HTTP client with X402 payment support</li> <li>Automatic payment handling</li> <li>Solana blockchain integration</li> <li>TypeScript support</li> </ul>"},{"location":"packages/typescript/openlibx402-client/#usage","title":"Usage","text":"<pre><code>import { X402Client } from '@openlibx402/client';\nimport { Keypair } from '@solana/web3.js';\n\n// Create client\nconst client = new X402Client({\n  wallet: keypair,\n  maxPaymentAmount: 5.0\n});\n\n// Make request with automatic payment\nconst response = await client.fetch('https://api.example.com/data');\nconst data = await response.json();\n</code></pre>"},{"location":"packages/typescript/openlibx402-client/#license","title":"License","text":"<p>MIT</p>"},{"location":"packages/typescript/openlibx402-core/","title":"@openlibx402/core","text":"<p>Core TypeScript library for X402 payment protocol.</p>"},{"location":"packages/typescript/openlibx402-core/#installation","title":"Installation","text":"<pre><code>npm install @openlibx402/core\n</code></pre>"},{"location":"packages/typescript/openlibx402-core/#features","title":"Features","text":"<ul> <li>Payment request and authorization structures</li> <li>Solana blockchain integration</li> <li>HTTP 402 protocol support</li> <li>TypeScript types and interfaces</li> </ul>"},{"location":"packages/typescript/openlibx402-core/#usage","title":"Usage","text":"<pre><code>import { PaymentRequest, SolanaPaymentProcessor } from '@openlibx402/core';\nimport { Keypair } from '@solana/web3.js';\n\nconst processor = new SolanaPaymentProcessor('https://api.devnet.solana.com');\n\nconst request: PaymentRequest = {\n  paymentAddress: 'wallet_address',\n  amount: '0.10',\n  assetAddress: 'token_mint'\n};\n\nconst transaction = await processor.createPaymentTransaction(request, keypair);\nconst txHash = await processor.signAndSendTransaction(transaction, keypair);\n</code></pre>"},{"location":"packages/typescript/openlibx402-core/#license","title":"License","text":"<p>MIT</p>"},{"location":"packages/typescript/openlibx402-express/","title":"@openlibx402/express","text":"<p>Express.js middleware and decorators for X402 payment protocol.</p>"},{"location":"packages/typescript/openlibx402-express/#installation","title":"Installation","text":"<pre><code>npm install @openlibx402/express\n</code></pre>"},{"location":"packages/typescript/openlibx402-express/#features","title":"Features","text":"<ul> <li>Express middleware for payment requirements</li> <li>Automatic payment verification</li> <li>402 response handling</li> <li>TypeScript support</li> </ul>"},{"location":"packages/typescript/openlibx402-express/#usage","title":"Usage","text":"<pre><code>import express from 'express';\nimport { paymentRequired } from '@openlibx402/express';\n\nconst app = express();\n\napp.get('/premium-data', paymentRequired({\n  amount: '0.10',\n  paymentAddress: 'YOUR_WALLET_ADDRESS',\n  tokenMint: 'USDC_MINT_ADDRESS',\n  description: 'Access to premium data'\n}), (req, res) =&gt; {\n  res.json({ data: 'Premium content' });\n});\n</code></pre>"},{"location":"packages/typescript/openlibx402-express/#license","title":"License","text":"<p>MIT</p>"},{"location":"packages/typescript/openlibx402-langchain/","title":"@openlibx402/langchain","text":"<p>LangChain.js integration for X402 payment protocol.</p>"},{"location":"packages/typescript/openlibx402-langchain/#installation","title":"Installation","text":"<pre><code>npm install @openlibx402/langchain\n</code></pre>"},{"location":"packages/typescript/openlibx402-langchain/#features","title":"Features","text":"<ul> <li>LangChain tools for X402 payments</li> <li>AI agent payment handling</li> <li>Automatic payment workflows</li> <li>TypeScript support</li> </ul>"},{"location":"packages/typescript/openlibx402-langchain/#usage","title":"Usage","text":"<pre><code>import { X402PaymentTool } from '@openlibx402/langchain';\nimport { ChatOpenAI } from 'langchain/chat_models/openai';\nimport { initializeAgent } from 'langchain/agents';\n\nconst paymentTool = new X402PaymentTool({\n  wallet: keypair,\n  maxPayment: '5.0'\n});\n\nconst agent = await initializeAgent({\n  tools: [paymentTool],\n  llm: new ChatOpenAI()\n});\n\nconst response = await agent.call({ input: 'Get premium data from API' });\n</code></pre>"},{"location":"packages/typescript/openlibx402-langchain/#license","title":"License","text":"<p>MIT</p>"},{"location":"packages/typescript/openlibx402-langgraph/","title":"@openlibx402/langgraph","text":"<p>LangGraph.js integration for X402 payment protocol.</p>"},{"location":"packages/typescript/openlibx402-langgraph/#installation","title":"Installation","text":"<pre><code>npm install @openlibx402/langgraph\n</code></pre>"},{"location":"packages/typescript/openlibx402-langgraph/#features","title":"Features","text":"<ul> <li>LangGraph nodes for payments</li> <li>Workflow integration</li> <li>AI agent payment workflows</li> <li>TypeScript support</li> </ul>"},{"location":"packages/typescript/openlibx402-langgraph/#usage","title":"Usage","text":"<pre><code>import { paymentNode } from '@openlibx402/langgraph';\nimport { StateGraph } from '@langchain/langgraph';\n\nconst workflow = new StateGraph();\n\nworkflow.addNode('pay', paymentNode);\nworkflow.addNode('fetch', fetchNode);\n\nworkflow.addEdge('pay', 'fetch');\n\nconst app = workflow.compile();\n</code></pre>"},{"location":"packages/typescript/openlibx402-langgraph/#license","title":"License","text":"<p>MIT</p>"}]}